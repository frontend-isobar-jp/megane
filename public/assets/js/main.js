!function t(e,i,n){function s(l,r){if(!i[l]){if(!e[l]){var a="function"==typeof require&&require;if(!r&&a)return a(l,!0);if(o)return o(l,!0);var c=new Error("Cannot find module '"+l+"'");throw c.code="MODULE_NOT_FOUND",c}var d=i[l]={exports:{}};e[l][0].call(d.exports,(function(t){return s(e[l][1][t]||t)}),d,d.exports,t,e,i,n)}return i[l].exports}for(var o="function"==typeof require&&require,l=0;l<n.length;l++)s(n[l]);return s}({1:[function(t,e,i){var n,s;n=this,s=function(){function t(t,e){this.selector=t,this.accordion=document.querySelectorAll(this.selector),null==e&&(e={}),this.toggleSpeed=e.toggleSpeed?e.toggleSpeed:1,this.btnElm=e.btnElm?e.btnElm:this.selector+"_btn",this.detailElm=e.detailElm?e.detailElm:this.selector+"_detail",this.OpenEnd=function(){},this.CloseEnd=function(){},this.clickFlag=!1,0!=this.accordion.length&&this.Init()}return t.prototype.AddTransition=function(t){t.style.transition="max-height "+this.toggleSpeed/1e3+"s",t.style.setProperty("-webkit-transition","max-height "+this.toggleSpeed/1e3+"s")},t.prototype.RemoveTransition=function(t){t.style.transition="none",t.style.setProperty("-webkit-transition","none")},t.prototype.Init=function(){var t=this,e="overflow: hidden;";e+="transition: max-height "+this.toggleSpeed/1e3+"s ;",e+="-webkit-transition: max-height "+this.toggleSpeed/1e3+"s ;";for(var i=0;i<this.accordion.length;i++){var n=this.accordion[i].querySelectorAll(this.detailElm),s=this.accordion[i].querySelectorAll(this.btnElm);0==n.length&&console.error(this.detailElm+" is not found"),0==s.length&&console.error(this.btnElm+" is not found");for(var o=0;o<s.length;o++)n[o]&&(n[o].style.cssText=e,this.HasClass(n[o],"active")||(n[o].style.maxHeight="0px")),function(e){n[e].addEventListener("transitionend",(function(){this.classList.contains("active")?(t.OpenEnd(e,this),this.style.maxHeight=null):t.CloseEnd(e,this)}),!1)}(o),s[o].addEventListener("click",(function(e){e.preventDefault(),t.Toggle(e)}))}},t.prototype.Toggle=function(t){if(!this.accordion[0])return console.error(this.selector+": Not Found"),!1;var e=t.currentTarget?t.currentTarget:document.querySelectorAll(t)[0];this.HasClass(e,"active")?this.clickFlag||this.Close(t):this.clickFlag||this.Open(t)},t.prototype.Open=function(t){if(!this.accordion[0])return console.error(this.selector+": Not Found"),!1;this.clickFlag=!0;var e=t.currentTarget?t.currentTarget:t,i=this.GetParent(e,this.selector),n=Array.prototype.indexOf.call(i.querySelectorAll(this.btnElm),e),s=i.querySelectorAll(this.detailElm)[n];s.style.maxHeight=s.scrollHeight+"px",this.AddClass(e,"active"),this.AddClass(s,"active"),this.clickFlag=!1},t.prototype.Close=function(t){var e=this;if(!this.accordion[0])return console.error(this.selector+": Not Found"),!1;this.clickFlag=!0;var i=t.currentTarget?t.currentTarget:t,n=this.GetParent(i,this.selector),s=Array.prototype.indexOf.call(n.querySelectorAll(this.btnElm),i),o=n.querySelectorAll(this.detailElm)[s];this.RemoveClass(i,"active"),this.RemoveClass(o,"active"),o.style.maxHeight=o.scrollHeight+"px",setTimeout((function(){e.AddTransition(o),o.style.maxHeight="0px"}),10),this.clickFlag=!1},t.prototype.CloseIgnoreThis=function(t){if(!this.accordion[0])return console.error(this.selector+": Not Found"),!1;for(var e=t,i=this.GetParent(e,this.selector),n=Array.prototype.indexOf.call(i.querySelectorAll(this.btnElm),e),s=i.querySelectorAll(this.btnElm),o=i.querySelectorAll(this.detailElm),l=0;l<s.length;l++)l!=n&&(s[l].classList.remove("active"),r(l));function r(t){o[t].classList.remove("active"),setTimeout((function(){o[t].style.maxHeight="0px"}),100)}},t.prototype.GetParent=function(t,e){var i,n=t,s=0;for(i=e.split(".")[1]?e.split(".")[1]:e.split("#")[1]?e.split("#")[1]:e;s<100&&(n=n.parentNode).tagName.toLowerCase()!=i;){if(n.className){if(n.className.match(i))break}else if(n.id&&n.id.match(i))break;s++}return n},t.prototype.AddClass=function(t,e){t.classList?t.classList.add(e):t.className+=" "+e},t.prototype.RemoveClass=function(t,e){t.classList?t.classList.remove(e):t.className=t.className.replace(new RegExp("(^|\\b)"+e.split(" ").join("|")+"(\\b|$)","gi")," ")},t.prototype.HasClass=function(t,e){var i=!1;return t.classList?t.classList.contains(e)&&(i=!0):new RegExp("(^| )"+e+"( |$)","gi").test(t.className)&&(i=!0),i},t},"function"==typeof define&&define.amd?define(s):"object"==typeof i?e.exports=s():n.mgnAccordion=s()},{}],2:[function(t,e,i){var n,s;n=this,s=function(){function t(t,e){this.selector=t,this.menu=document.querySelectorAll(this.selector)[0],null==e&&(e={}),this.globalNav=e.globalNav?e.globalNav:"#globalnav",this.activeName=e.activeName?e.activeName:"active",this.closePoint=e.closePoint?e.closePoint:null,this.noScroll=null==e.noScroll||e.noScroll,this.globalNavElm=document.querySelectorAll(this.globalNav)[0],this.flag=!1,this.scrollVal=null,this.baseWinWidth=window.innerWidth,this.OpenStart=function(){},this.OpenEnd=function(){},this.CloseStart=function(){},this.CloseEnd=function(){},this.menu&&this.Init()}return t.prototype.Init=function(){var t=this;this.menu.addEventListener("click",(function(){t.flag?t.Close():t.Open()})),window.addEventListener("resize",(function(){var e=window.innerWidth;t.closePoint&&t.flag&&(t.baseWinWidth<e?t.baseWinWidth<t.closePoint&&t.closePoint<e&&t.Close():t.baseWinWidth>t.closePoint&&t.closePoint>e&&t.Close(),t.baseWinWidth=e)}))},t.prototype.Open=function(t){if(!this.menu)return console.error(this.selector+": Not Found"),!1;var e=this;this.scrollVal=document.documentElement&&document.documentElement.scrollTop||document.body.scrollTop,e.OpenStart(),this.AddClass(this.menu,this.activeName),this.AddClass(this.globalNavElm,this.activeName);var i=function(){e.OpenEnd(),e.globalNavElm.removeEventListener("transitionend",i)};if(this.globalNavElm.addEventListener("transitionend",i,!1),this.noScroll){this.htmlTag=document.getElementsByTagName("html")[0];var n="position: fixed; ";n+="width: 100%; ",n+="top:"+-this.scrollVal+"px;",this.htmlTag.style.cssText=n}this.flag=!0},t.prototype.Close=function(){if(!this.menu)return console.error(this.selector+": Not Found"),!1;var t=this;t.CloseStart(),this.noScroll&&(this.htmlTag.style.position="static"),this.noScroll&&window.scroll(0,this.scrollVal),this.RemoveClass(this.menu,this.activeName),this.RemoveClass(this.globalNavElm,this.activeName);var e=function(){t.CloseEnd(),t.globalNavElm.removeEventListener("transitionend",e)};this.globalNavElm.addEventListener("transitionend",e,!1),this.flag=!1},t.prototype.AddClass=function(t,e){t.classList?t.classList.add(e):t.className+=" "+e},t.prototype.RemoveClass=function(t,e){t.classList?t.classList.remove(e):t.className=t.className.replace(new RegExp("(^|\\b)"+e.split(" ").join("|")+"(\\b|$)","gi")," ")},t},"function"==typeof define&&define.amd?define(s):"object"==typeof i?e.exports=s():n.mgnMenu=s()},{}],3:[function(t,e,i){var n,s;n=this,s=function(){function t(){this._ua=navigator.userAgent,this._ver=navigator.appVersion;var t=this._ua.toLowerCase(),e=this._ver.toLowerCase();this.isMSIE=t.indexOf("msie")>-1&&-1==t.indexOf("opera"),this.isIE6=this.isMSIE&&e.indexOf("msie 6.")>-1,this.isIE7=this.isMSIE&&e.indexOf("msie 7.")>-1,this.isIE8=this.isMSIE&&e.indexOf("msie 8.")>-1,this.isIE9=this.isMSIE&&e.indexOf("msie 9.")>-1,this.isIE10=this.isMSIE&&e.indexOf("msie 10.")>-1,this.isIE11=t.indexOf("trident/7")>-1,this.isIE=this.isMSIE||this.isIE11,this.isEdge=t.indexOf("edge")>-1,this.isChrome=t.indexOf("chrome")>-1&&-1==t.indexOf("edge"),this.isFirefox=t.indexOf("firefox")>-1,this.isSafari=t.indexOf("safari")>-1&&-1==t.indexOf("chrome"),this.isOpera=t.indexOf("opera")>-1,this.isIphone=t.indexOf("iphone")>0,this.isIpod=t.indexOf("ipod")>0,this.isAndroid=t.indexOf("android")>0&&t.indexOf("mobile")>0,this.isWinPhone=t.indexOf("windows phone")>0,this.isIpad=t.indexOf("ipad")>0,this.isAndroidTab=t.indexOf("android")>0&&-1==t.indexOf("mobile"),this.isSp=this.isIphone||this.isIpod||this.isAndroid||this.isWinPhone,this.isTab=this.isIpad||this.isAndroidTab,this.isTouch="createTouch"in document||"ontouchstart"in document}return t.prototype.GetIosVersion=function(){var t,e;return this.isIphone||this.isIpod||this.isIpad?(t=this._ver.match(/OS (\d+)_(\d+)_?(\d+)?/),e=[parseInt(t[1],10),parseInt(t[2],10),parseInt(t[3]||0,10)],Number(e[0]+"."+e[1])):e},t.prototype.GetAndroidVersion=function(){if(this.isAndroid)return Number(parseFloat(this._ua.slice(this._ua.indexOf("Android")+8)))},t},"function"==typeof define&&define.amd?define(s):"object"==typeof i?e.exports=s():n.mgnUa=s()},{}],4:[function(t,i,n){!function(t,e){if("function"==typeof define&&define.amd)define(e);else if("object"==typeof n)i.exports=e();else{var s=e();for(var o in s)t[o]=s[o]}}(this,(function(){return{AddClass:function(t,e){t.classList?t.classList.add(e):t.className+=" "+e},RemoveClass:function(t,e){t.classList?t.classList.remove(e):t.className=t.className.replace(new RegExp("(^|\\b)"+e.split(" ").join("|")+"(\\b|$)","gi")," ")},HasClass:function(t,i){var n=!1;return t.classList?t.classList.contains(i)&&(n=!0):new RegExp("(^| )"+i+"( |$)","gi").test(e.target.className)&&(n=!0),n},SetCss:function(t,e){var i="";for(var n in e)i+=n+":"+e[n]+"; ";t.style.cssText=i},GetParents:function(t,e){var i,n=t,s=0;for(i=e.split(".")[1]?e.split(".")[1]:e.split("#")[1]?e.split("#")[1]:e;s<100&&(n=n.parentNode).tagName.toLowerCase()!=i;){if(n.className){if(n.className.match(i))break}else if(n.id&&n.id.match(i))break;s++}return n},GetSiblings:function(t,e){var i=Array.prototype.filter.call(t.parentNode.children,(function(i,n){var s=t.parentNode.querySelectorAll(e),o=null;for(n=0;n<s.length;n++)i===s[n]&&(o=s[n]);return i!==t&&i===o}));return 0!=i.length?i:null},Not:function(t,e){var i=!1,n=e.split(".")[1]?e.split(".")[1]:e.split("#")[1];return t.classList?t.classList.contains(n)&&(i=!0):new RegExp("(^| )"+n+"( |$)","gi").test(t.className)&&(i=!0),t.id==n&&(i=!0),i},GetOffset:function(t){var e=t.getBoundingClientRect();return{top:e.top+window.pageYOffset-document.documentElement.clientTop,left:e.left+window.pageXOffset-document.documentElement.clientLeft}},GetHeightData:function(t){var e=window.getComputedStyle(t),i=t.offsetHeight,n=parseFloat(e.borderTopWidth),s=parseFloat(e.borderBottomWidth),o=parseFloat(e.paddingTop),l=parseFloat(e.paddingBottom);return{height:i,bordertop:n,borderBottom:s,paddingTop:o,paddingBottom:l,outerHeight:i+n+s+o+l}},GetWidthData:function(t){var e=window.getComputedStyle(t),i=t.offsetWidth,n=parseFloat(e.borderLeftWidth),s=parseFloat(e.borderRightWidth),o=parseFloat(e.paddingLeft),l=parseFloat(e.paddingRight);return{width:i,borderLeft:n,borderRight:s,paddingLeft:o,paddingRight:l,outerWidth:i+n+s+o+l}}}}))},{}],5:[function(t,e,i){"use strict";Object.defineProperty(i,"__esModule",{value:!0});var n,s=t("mgn-utility"),o=t("mgn-menu"),l=(n=o)&&n.__esModule?n:{default:n};i.default=function(){var t;document.querySelector(".j-menu")&&function(){var e=0,i=new l.default(".j-menu",{globalNav:".j-menu",activeName:"is-open",closePoint:768,noScroll:!1});i.OpenStart=function(){e=window.pageYOffset,(0,s.AddClass)(document.getElementsByTagName("html")[0],"is-gnav_open"),setTimeout((function(){(0,s.AddClass)(document.getElementsByTagName("html")[0],"is-gnav_fix"),window.scrollTo(0,0)}),200)},i.CloseStart=function(){(0,s.RemoveClass)(document.getElementsByTagName("html")[0],"is-gnav_fix"),window.scrollTo(0,e),setTimeout((function(){(0,s.RemoveClass)(document.getElementsByTagName("html")[0],"is-gnav_open")}),100)};var n=document.querySelectorAll(".l-header__page a");for(t=0;t<n.length;t++)n[t].addEventListener("click",(function(){i.Close()}))}()}},{"mgn-menu":2,"mgn-utility":4}],6:[function(t,e,i){"use strict";Object.defineProperty(i,"__esModule",{value:!0});t("mgn-utility");var n,s=t("mgn-ua");new((n=s)&&n.__esModule?n:{default:n}).default;i.default=function(){var t=document.querySelectorAll(".l-header__inner")[0];t&&document.addEventListener("scroll",(function(){var e;e=document.documentElement.scrollLeft,t.style.left=-e+"px"}))}},{"mgn-ua":3,"mgn-utility":4}],7:[function(t,e,i){"use strict";Object.defineProperty(i,"__esModule",{value:!0});var n,s=t("mgn-utility"),o=t("mgn-ua");var l=new((n=o)&&n.__esModule?n:{default:n}).default;i.default=function(){var t=document.getElementsByTagName("a"),e=void 0,i=void 0;l.isSp||l.isTab?(e="touchstart",i="touchend"):(e="mouseenter",i="mouseleave");for(var n=function(t){(0,s.AddClass)(t.currentTarget,"is-hover")},o=function(t){(0,s.RemoveClass)(t.currentTarget,"is-hover")},r=0;r<t.length;r++)t[r].removeEventListener("transitionend",n),t[r].addEventListener(e,n),t[r].addEventListener(i,o)}},{"mgn-ua":3,"mgn-utility":4}],8:[function(t,e,i){"use strict";Object.defineProperty(i,"__esModule",{value:!0});var n,s=t("mgn-accordion"),o=(n=s)&&n.__esModule?n:{default:n};t("mgn-utility");i.default=function(){new o.default(".j-accordion_menu",{toggleSpeed:200,btnElm:".parents",detailElm:".child"})}},{"mgn-accordion":1,"mgn-utility":4}],9:[function(t,e,i){"use strict";Object.defineProperty(i,"__esModule",{value:!0});var n=t("mgn-utility");i.default=function(){var t=document.querySelector("html"),e=!1,i=function(){window.pageYOffset>10?(e||(0,n.AddClass)(t,"is-scroll"),e=!0):(e&&(0,n.RemoveClass)(t,"is-scroll"),e=!1)};t&&(document.addEventListener("scroll",(function(){i()})),document.addEventListener("load",(function(){i()})))}},{"mgn-utility":4}],10:[function(t,e,i){"use strict";Object.defineProperty(i,"__esModule",{value:!0});var n=t("mgn-utility");i.default=function(){var t=document.getElementsByTagName("html")[0],e=null,i=void 0,s=function(){clearTimeout(e),e=setTimeout((function(){window.innerWidth>640?(i||null==i)&&((0,n.RemoveClass)(t,"is-transition_sp"),(0,n.AddClass)(t,"is-transition_pc"),i=!1):(i&&null!=i||((0,n.AddClass)(t,"is-transition_sp"),(0,n.RemoveClass)(t,"is-transition_pc")),i=!0)}),150)};window.addEventListener("resize",(function(){s()})),window.addEventListener("load",(function(){s()}))}},{"mgn-utility":4}],11:[function(t,e,i){"use strict";Object.defineProperty(i,"__esModule",{value:!0});t("mgn-utility"),c(t("mgn-ua"));var n=c(t("./_scrolldown")),s=c(t("./_set_transition")),o=c(t("./_header_menu")),l=c(t("./_horizontal_scroll")),r=c(t("./_menu_accordion")),a=c(t("./_hover_touch"));function c(t){return t&&t.__esModule?t:{default:t}}i.default=function(){(0,n.default)(),(0,a.default)(),(0,s.default)(),(0,l.default)(),(0,o.default)(),(0,r.default)()}},{"./_header_menu":5,"./_horizontal_scroll":6,"./_hover_touch":7,"./_menu_accordion":8,"./_scrolldown":9,"./_set_transition":10,"mgn-ua":3,"mgn-utility":4}],12:[function(t,e,i){"use strict";var n,s=t("./common/common");(0,((n=s)&&n.__esModule?n:{default:n}).default)()},{"./common/common":11}]},{},[12]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJub2RlX21vZHVsZXMvbWduLWFjY29yZGlvbi9zcmMvbWduLWFjY29yZGlvbi5qcyIsIm5vZGVfbW9kdWxlcy9tZ24tbWVudS9zcmMvbWduLW1lbnUuanMiLCJub2RlX21vZHVsZXMvbWduLXVhL3NyYy9tZ24tdWEuanMiLCJub2RlX21vZHVsZXMvbWduLXV0aWxpdHkvc3JjL21nbi11dGlsaXR5LmpzIiwic3JjL2pzL2NvbW1vbi9faGVhZGVyX21lbnUuanMiLCJzcmMvanMvY29tbW9uL19ob3Jpem9udGFsX3Njcm9sbC5qcyIsInNyYy9qcy9jb21tb24vX2hvdmVyX3RvdWNoLmpzIiwic3JjL2pzL2NvbW1vbi9fbWVudV9hY2NvcmRpb24uanMiLCJzcmMvanMvY29tbW9uL19zY3JvbGxkb3duLmpzIiwic3JjL2pzL2NvbW1vbi9fc2V0X3RyYW5zaXRpb24uanMiLCJzcmMvanMvY29tbW9uL2NvbW1vbi5qcyIsInNyYy9qcy9tYWluLmpzIl0sIm5hbWVzIjpbInIiLCJlIiwibiIsInQiLCJvIiwiaSIsImYiLCJjIiwicmVxdWlyZSIsInUiLCJhIiwiRXJyb3IiLCJjb2RlIiwicCIsImV4cG9ydHMiLCJjYWxsIiwibGVuZ3RoIiwiMSIsIm1vZHVsZSIsInJvb3QiLCJmYWN0b3J5IiwidGhpcyIsIm1nbkFjY29yZGlvbiIsInNlbGVjdG9yIiwib3B0aW9uIiwiYWNjb3JkaW9uIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yQWxsIiwidG9nZ2xlU3BlZWQiLCJidG5FbG0iLCJkZXRhaWxFbG0iLCJPcGVuRW5kIiwiQ2xvc2VFbmQiLCJjbGlja0ZsYWciLCJJbml0IiwicHJvdG90eXBlIiwiQWRkVHJhbnNpdGlvbiIsInRhcmdldCIsInN0eWxlIiwidHJhbnNpdGlvbiIsInNldFByb3BlcnR5IiwiUmVtb3ZlVHJhbnNpdGlvbiIsInRoaXNfIiwiaW5pdENzcyIsIkRFVEFJTCIsIkJUTiIsImNvbnNvbGUiLCJlcnJvciIsImoiLCJjc3NUZXh0IiwiSGFzQ2xhc3MiLCJtYXhIZWlnaHQiLCJhZGRFdmVudExpc3RlbmVyIiwiY2xhc3NMaXN0IiwiY29udGFpbnMiLCJwcmV2ZW50RGVmYXVsdCIsIlRvZ2dsZSIsImVsZW1lbnQiLCJUQVJHRVQiLCJjdXJyZW50VGFyZ2V0IiwiQ2xvc2UiLCJPcGVuIiwiUEFSRU5UIiwiR2V0UGFyZW50IiwiSU5ERVgiLCJBcnJheSIsImluZGV4T2YiLCJUQVJHRVRfREVUQUlMIiwic2Nyb2xsSGVpZ2h0IiwiQWRkQ2xhc3MiLCJSZW1vdmVDbGFzcyIsInNldFRpbWVvdXQiLCJDbG9zZUlnbm9yZVRoaXMiLCJUQVJHRVRfQlROIiwicmVtb3ZlIiwiQ2xvc2VfIiwicGFyZW50Iiwic3BsaXQiLCJwYXJlbnROb2RlIiwidGFnTmFtZSIsInRvTG93ZXJDYXNlIiwiY2xhc3NOYW1lIiwibWF0Y2giLCJpZCIsIl9jbGFzc05hbWUiLCJhZGQiLCJyZXBsYWNlIiwiUmVnRXhwIiwiam9pbiIsImlnbm9yZSIsInRlc3QiLCJkZWZpbmUiLCJhbWQiLCJtZ25NZW51IiwibWVudSIsImdsb2JhbE5hdiIsImFjdGl2ZU5hbWUiLCJjbG9zZVBvaW50Iiwibm9TY3JvbGwiLCJnbG9iYWxOYXZFbG0iLCJmbGFnIiwic2Nyb2xsVmFsIiwiYmFzZVdpbldpZHRoIiwid2luZG93IiwiaW5uZXJXaWR0aCIsIk9wZW5TdGFydCIsIkNsb3NlU3RhcnQiLCJXSU5fV0lEVEgiLCJkb2N1bWVudEVsZW1lbnQiLCJzY3JvbGxUb3AiLCJib2R5IiwiRW5kRnVuYyIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJodG1sVGFnIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJjc3MiLCJwb3NpdGlvbiIsInNjcm9sbCIsIm1nblVhIiwiX3VhIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiX3ZlciIsImFwcFZlcnNpb24iLCJ1YSIsInZlciIsImlzTVNJRSIsImlzSUU2IiwiaXNJRTciLCJpc0lFOCIsImlzSUU5IiwiaXNJRTEwIiwiaXNJRTExIiwiaXNJRSIsImlzRWRnZSIsImlzQ2hyb21lIiwiaXNGaXJlZm94IiwiaXNTYWZhcmkiLCJpc09wZXJhIiwiaXNJcGhvbmUiLCJpc0lwb2QiLCJpc0FuZHJvaWQiLCJpc1dpblBob25lIiwiaXNJcGFkIiwiaXNBbmRyb2lkVGFiIiwiaXNTcCIsImlzVGFiIiwiaXNUb3VjaCIsIkdldElvc1ZlcnNpb24iLCJ2IiwidmVyc2lvbnMiLCJwYXJzZUludCIsIk51bWJlciIsIkdldEFuZHJvaWRWZXJzaW9uIiwicGFyc2VGbG9hdCIsInNsaWNlIiwianEiLCJrZXkiLCJTZXRDc3MiLCJzdHlsZXMiLCJHZXRQYXJlbnRzIiwiR2V0U2libGluZ3MiLCJlbCIsInNpYmxpbmdzIiwiZmlsdGVyIiwiY2hpbGRyZW4iLCJjaGlsZCIsInRhcmdldEVsbSIsInRhcmdldF8iLCJOb3QiLCJpZ25vcmVUeHQiLCJJR1VOT1JFIiwiR2V0T2Zmc2V0IiwiQk9YIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwidG9wIiwicGFnZVlPZmZzZXQiLCJjbGllbnRUb3AiLCJsZWZ0IiwicGFnZVhPZmZzZXQiLCJjbGllbnRMZWZ0IiwiR2V0SGVpZ2h0RGF0YSIsIlNUWUxFUyIsImdldENvbXB1dGVkU3R5bGUiLCJIIiwib2Zmc2V0SGVpZ2h0IiwiQlQiLCJib3JkZXJUb3BXaWR0aCIsIkJCIiwiYm9yZGVyQm90dG9tV2lkdGgiLCJQVCIsInBhZGRpbmdUb3AiLCJQQiIsInBhZGRpbmdCb3R0b20iLCJoZWlnaHQiLCJib3JkZXJ0b3AiLCJib3JkZXJCb3R0b20iLCJvdXRlckhlaWdodCIsIkdldFdpZHRoRGF0YSIsIlciLCJvZmZzZXRXaWR0aCIsImJvcmRlckxlZnRXaWR0aCIsImJvcmRlclJpZ2h0V2lkdGgiLCJwYWRkaW5nTGVmdCIsInBhZGRpbmdSaWdodCIsIndpZHRoIiwiYm9yZGVyTGVmdCIsImJvcmRlclJpZ2h0Iiwib3V0ZXJXaWR0aCIsIl9tZ25VdGlsaXR5IiwiX21nbk1lbnUiLCJxdWVyeVNlbGVjdG9yIiwiYm9keVlPZmZzZXQiLCJfbWduTWVudTIiLCJkZWZhdWx0Iiwic2Nyb2xsVG8iLCJoZWFkZXJMaW5rIiwiX21nblVhIiwic2Nyb2xsTGVmdCIsIlVBIiwiSG92ZXJTdGFydCIsIkhvdmVyRW5kIiwiSE9WRVJfU1RBUlRfRk5DIiwiSE9WRVJfRU5EX0ZOQyIsIl9tZ25BY2NvcmRpb24iLCJfbWduQWNjb3JkaW9uMiIsInNob3dGbGFnIiwiU2hvd1RvZ2dsZUZ1bmMiLCJ0aW1lciIsInNwRmxhZyIsIkp1ZGdlV2luZG93V2lkdGgiLCJjbGVhclRpbWVvdXQiLCJ1bmRlZmluZWQiLCJfc2Nyb2xsZG93bjIiLCJfaG92ZXJfdG91Y2gyIiwiX3NldF90cmFuc2l0aW9uMiIsIl9ob3Jpem9udGFsX3Njcm9sbDIiLCJfaGVhZGVyX21lbnUyIiwiX21lbnVfYWNjb3JkaW9uMiIsIl9jb21tb24iXSwibWFwcGluZ3MiOiJDQUFBLFNBQUFBLEVBQUFDLEVBQUFDLEVBQUFDLEdBQUEsU0FBQUMsRUFBQUMsRUFBQUMsR0FBQSxJQUFBSixFQUFBRyxHQUFBLENBQUEsSUFBQUosRUFBQUksR0FBQSxDQUFBLElBQUFFLEVBQUEsbUJBQUFDLFNBQUFBLFFBQUEsSUFBQUYsR0FBQUMsRUFBQSxPQUFBQSxFQUFBRixHQUFBLEdBQUEsR0FBQUksRUFBQSxPQUFBQSxFQUFBSixHQUFBLEdBQUEsSUFBQUssRUFBQSxJQUFBQyxNQUFBLHVCQUFBTixFQUFBLEtBQUEsTUFBQUssRUFBQUUsS0FBQSxtQkFBQUYsRUFBQSxJQUFBRyxFQUFBWCxFQUFBRyxHQUFBLENBQUFTLFFBQUEsSUFBQWIsRUFBQUksR0FBQSxHQUFBVSxLQUFBRixFQUFBQyxTQUFBLFNBQUFkLEdBQUEsT0FBQUksRUFBQUgsRUFBQUksR0FBQSxHQUFBTCxJQUFBQSxLQUFBYSxFQUFBQSxFQUFBQyxRQUFBZCxFQUFBQyxFQUFBQyxFQUFBQyxHQUFBLE9BQUFELEVBQUFHLEdBQUFTLFFBQUEsSUFBQSxJQUFBTCxFQUFBLG1CQUFBRCxTQUFB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RUFBQSw2QkFDQUEsRUFBQSwwQkFDQUEsRUFBQSxnRkFJYSxZQU1ULEVBQUFpTyxFQUFBbkIsWUFPQSxFQUFBb0IsRUFBQXBCLFlBT0EsRUFBQXFCLEVBQUFyQixZQU9BLEVBQUFzQixFQUFBdEIsWUFPQSxFQUFBdUIsRUFBQXZCLFlBT0EsRUFBQXdCLEVBQUF4QiwwTUNyREosTUFBQXlCLEVBQUF2TyxFQUFBLG9CQU1DLHNDQUFBOE0iLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbigpe2Z1bmN0aW9uIHIoZSxuLHQpe2Z1bmN0aW9uIG8oaSxmKXtpZighbltpXSl7aWYoIWVbaV0pe3ZhciBjPVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmU7aWYoIWYmJmMpcmV0dXJuIGMoaSwhMCk7aWYodSlyZXR1cm4gdShpLCEwKTt2YXIgYT1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK2krXCInXCIpO3Rocm93IGEuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixhfXZhciBwPW5baV09e2V4cG9ydHM6e319O2VbaV1bMF0uY2FsbChwLmV4cG9ydHMsZnVuY3Rpb24ocil7dmFyIG49ZVtpXVsxXVtyXTtyZXR1cm4gbyhufHxyKX0scCxwLmV4cG9ydHMscixlLG4sdCl9cmV0dXJuIG5baV0uZXhwb3J0c31mb3IodmFyIHU9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZSxpPTA7aTx0Lmxlbmd0aDtpKyspbyh0W2ldKTtyZXR1cm4gb31yZXR1cm4gcn0pKCkiLCIvKlxuXG5NZWdhbmUgVGVtcGxhdGVcblxuV2Vic2l0ZTogaHR0cDovL21lZ2FuZS10ZW1wbGF0ZS5jb20vXG5MaWNlbnNlOiBEZW50c3UgSXNvYmFyIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG5cbiovXG5cbihmdW5jdGlvbihyb290LCBmYWN0b3J5KSB7XG4gICAgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICAgICAgICBkZWZpbmUoZmFjdG9yeSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcm9vdC5tZ25BY2NvcmRpb24gPSBmYWN0b3J5KCk7XG4gICAgfVxufSh0aGlzLCBmdW5jdGlvbigpIHtcblxuICAgIGZ1bmN0aW9uIG1nbkFjY29yZGlvbihzZWxlY3Rvciwgb3B0aW9uKSB7XG5cbiAgICAgICAgdGhpcy5zZWxlY3RvciA9IHNlbGVjdG9yO1xuICAgICAgICB0aGlzLmFjY29yZGlvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoIHRoaXMuc2VsZWN0b3IgKTtcblxuICAgICAgICAvL29wdGlvblxuICAgICAgICBpZihvcHRpb24gPT0gbnVsbCkgb3B0aW9uID0ge307XG4gICAgICAgIHRoaXMudG9nZ2xlU3BlZWQgPSBvcHRpb24udG9nZ2xlU3BlZWQgPyBvcHRpb24udG9nZ2xlU3BlZWQgOiAxO1xuICAgICAgICB0aGlzLmJ0bkVsbSA9IG9wdGlvbi5idG5FbG0gPyBvcHRpb24uYnRuRWxtIDogdGhpcy5zZWxlY3RvciArIFwiX2J0blwiO1xuICAgICAgICB0aGlzLmRldGFpbEVsbSA9IG9wdGlvbi5kZXRhaWxFbG0gPyBvcHRpb24uZGV0YWlsRWxtIDogdGhpcy5zZWxlY3RvciArIFwiX2RldGFpbFwiO1xuICAgICAgICB0aGlzLk9wZW5FbmQgPSBmdW5jdGlvbigpe307XG4gICAgICAgIHRoaXMuQ2xvc2VFbmQgPSBmdW5jdGlvbigpe307XG5cbiAgICAgICAgdGhpcy5jbGlja0ZsYWcgPSBmYWxzZTtcblxuICAgICAgICBpZih0aGlzLmFjY29yZGlvbi5sZW5ndGggIT0gMCkge1xuICAgICAgICAgICAgdGhpcy5Jbml0KCk7XG4gICAgICAgIH07XG5cbiAgICB9XG5cbiAgICBtZ25BY2NvcmRpb24ucHJvdG90eXBlLkFkZFRyYW5zaXRpb24gPSBmdW5jdGlvbih0YXJnZXQpIHtcbiAgICAgICAgdGFyZ2V0LnN0eWxlLnRyYW5zaXRpb24gPSBcIm1heC1oZWlnaHQgXCIgKyB0aGlzLnRvZ2dsZVNwZWVkLzEwMDAgK1wic1wiO1xuICAgICAgICB0YXJnZXQuc3R5bGUuc2V0UHJvcGVydHkoJy13ZWJraXQtdHJhbnNpdGlvbicsIFwibWF4LWhlaWdodCBcIiArIHRoaXMudG9nZ2xlU3BlZWQvMTAwMCArXCJzXCIpO1xuICAgIH1cblxuICAgIG1nbkFjY29yZGlvbi5wcm90b3R5cGUuUmVtb3ZlVHJhbnNpdGlvbiA9IGZ1bmN0aW9uKHRhcmdldCkge1xuICAgICAgICB0YXJnZXQuc3R5bGUudHJhbnNpdGlvbiA9IFwibm9uZVwiO1xuICAgICAgICB0YXJnZXQuc3R5bGUuc2V0UHJvcGVydHkoJy13ZWJraXQtdHJhbnNpdGlvbicsIFwibm9uZVwiKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqKlxuICAgICoqIEluaXRcbiAgICAqKlxuICAgICoqL1xuXG4gICAgbWduQWNjb3JkaW9uLnByb3RvdHlwZS5Jbml0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB0aGlzXyA9IHRoaXM7XG5cbiAgICAgICAgdmFyIGluaXRDc3MgPSBcIm92ZXJmbG93OiBoaWRkZW47XCI7XG4gICAgICAgICAgICBpbml0Q3NzICs9IFwidHJhbnNpdGlvbjogbWF4LWhlaWdodCBcIiArIHRoaXMudG9nZ2xlU3BlZWQvMTAwMCArXCJzIDtcIjtcbiAgICAgICAgICAgIGluaXRDc3MgKz0gXCItd2Via2l0LXRyYW5zaXRpb246IG1heC1oZWlnaHQgXCIgKyB0aGlzLnRvZ2dsZVNwZWVkLzEwMDAgK1wicyA7XCI7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmFjY29yZGlvbi5sZW5ndGg7IGkrKykge1xuXG4gICAgICAgICAgICB2YXIgREVUQUlMID0gdGhpcy5hY2NvcmRpb25baV0ucXVlcnlTZWxlY3RvckFsbCh0aGlzLmRldGFpbEVsbSk7XG4gICAgICAgICAgICB2YXIgQlROID0gdGhpcy5hY2NvcmRpb25baV0ucXVlcnlTZWxlY3RvckFsbCh0aGlzLmJ0bkVsbSk7XG5cbiAgICAgICAgICAgIGlmKCBERVRBSUwubGVuZ3RoID09IDAgKSBjb25zb2xlLmVycm9yKHRoaXMuZGV0YWlsRWxtICsgXCIgaXMgbm90IGZvdW5kXCIpO1xuICAgICAgICAgICAgaWYoIEJUTi5sZW5ndGggPT0gMCApIGNvbnNvbGUuZXJyb3IodGhpcy5idG5FbG0gKyBcIiBpcyBub3QgZm91bmRcIik7XG5cbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgQlROLmxlbmd0aDsgaisrKSB7XG5cbiAgICAgICAgICAgICAgICBpZiggREVUQUlMW2pdICkge1xuICAgICAgICAgICAgICAgICAgICBERVRBSUxbal0uc3R5bGUuY3NzVGV4dCA9IGluaXRDc3M7XG4gICAgICAgICAgICAgICAgICAgIGlmKCAhdGhpcy5IYXNDbGFzcyggREVUQUlMW2pdLCBcImFjdGl2ZVwiICkgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBERVRBSUxbal0uc3R5bGUubWF4SGVpZ2h0ID0gXCIwcHhcIjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIChmdW5jdGlvbiAobikge1xuICAgICAgICAgICAgICAgICAgICBERVRBSUxbbl0uYWRkRXZlbnRMaXN0ZW5lcihcInRyYW5zaXRpb25lbmRcIiwgZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jbGFzc0xpc3QuY29udGFpbnMoXCJhY3RpdmVcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzXy5PcGVuRW5kKG4sdGhpcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdHlsZS5tYXhIZWlnaHQgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRBUkdFVC5zdHlsZS5wb2ludGVyRXZlbnRzID0gXCJpbmhlcml0XCI7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNfLkNsb3NlRW5kKG4sdGhpcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcIlRSQU5TSVRJT04gRU5EISEhXCIpO1xuICAgICAgICAgICAgICAgICAgICB9LCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgfSkoaik7XG5cblxuICAgICAgICAgICAgICAgIEJUTltqXS5hZGRFdmVudExpc3RlbmVyKCBcImNsaWNrXCIsIGZ1bmN0aW9uKGUpIHtcblxuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpc18uVG9nZ2xlKCBlICk7XG5cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgLyoqXG4gICAgKipcbiAgICAqKiBUb2dnbGVcbiAgICAqKlxuICAgICoqL1xuICAgIG1nbkFjY29yZGlvbi5wcm90b3R5cGUuVG9nZ2xlID0gZnVuY3Rpb24oIGVsZW1lbnQgKSB7XG5cbiAgICAgICAgaWYoIXRoaXMuYWNjb3JkaW9uWzBdKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCB0aGlzLnNlbGVjdG9yICsgXCI6IE5vdCBGb3VuZFwiICk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgVEFSR0VUID0gZWxlbWVudC5jdXJyZW50VGFyZ2V0ID8gZWxlbWVudC5jdXJyZW50VGFyZ2V0IDogZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChlbGVtZW50KVswXTtcblxuICAgICAgICBpZiggdGhpcy5IYXNDbGFzcyggVEFSR0VULCBcImFjdGl2ZVwiICkgKXtcblxuICAgICAgICAgICAgaWYoICF0aGlzLmNsaWNrRmxhZyApIHRoaXMuQ2xvc2UoIGVsZW1lbnQgKTtcblxuICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICBpZiggIXRoaXMuY2xpY2tGbGFnICkgdGhpcy5PcGVuKCBlbGVtZW50ICk7XG5cbiAgICAgICAgfVxuXG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAqKlxuICAgICoqIE9wZW4sIENsb3NlXG4gICAgKipcbiAgICAqKi9cblxuXG5cblxuICAgIG1nbkFjY29yZGlvbi5wcm90b3R5cGUuT3BlbiA9IGZ1bmN0aW9uKGVsZW1lbnQpIHtcblxuICAgICAgICB2YXIgdGhpc18gPSB0aGlzO1xuXG4gICAgICAgIGlmKCF0aGlzLmFjY29yZGlvblswXSkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvciggdGhpcy5zZWxlY3RvciArIFwiOiBOb3QgRm91bmRcIiApO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5jbGlja0ZsYWcgPSB0cnVlO1xuXG4gICAgICAgIHZhciBUQVJHRVQgPSBlbGVtZW50LmN1cnJlbnRUYXJnZXQgPyBlbGVtZW50LmN1cnJlbnRUYXJnZXQgOiBlbGVtZW50O1xuICAgICAgICB2YXIgUEFSRU5UID0gdGhpcy5HZXRQYXJlbnQoIFRBUkdFVCwgdGhpcy5zZWxlY3RvciApO1xuXG4gICAgICAgIHZhciBJTkRFWCA9IEFycmF5LnByb3RvdHlwZS5pbmRleE9mLmNhbGwoUEFSRU5ULnF1ZXJ5U2VsZWN0b3JBbGwodGhpcy5idG5FbG0pLCBUQVJHRVQpO1xuXG5cbiAgICAgICAgdmFyIFRBUkdFVF9ERVRBSUwgPSBQQVJFTlQucXVlcnlTZWxlY3RvckFsbCggdGhpcy5kZXRhaWxFbG0gKVsgSU5ERVggXTtcblxuICAgICAgICAvLyBUQVJHRVRfREVUQUlMLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG4gICAgICAgIFRBUkdFVF9ERVRBSUwuc3R5bGUubWF4SGVpZ2h0ID0gVEFSR0VUX0RFVEFJTC5zY3JvbGxIZWlnaHQgKyBcInB4XCI7XG5cbiAgICAgICAgLy8gdmFyIEVuZEZ1bmMgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gICAgIHRoaXNfLmNsaWNrRmxhZyA9IGZhbHNlO1xuICAgICAgICAvLyAgICAgdGhpc18uT3BlbkVuZCggSU5ERVggKTtcbiAgICAgICAgLy8gICAgIC8vIHRoaXNfLlJlbW92ZVRyYW5zaXRpb24oVEFSR0VUX0RFVEFJTCk7XG4gICAgICAgIC8vICAgICBUQVJHRVRfREVUQUlMLnN0eWxlLm1heEhlaWdodCA9IG51bGw7XG4gICAgICAgIC8vICAgICBUQVJHRVRfREVUQUlMLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0cmFuc2l0aW9uZW5kXCIsIEVuZEZ1bmMpO1xuICAgICAgICAvLyB9O1xuXG4gICAgICAgIHRoaXMuQWRkQ2xhc3MoVEFSR0VULFwiYWN0aXZlXCIpO1xuICAgICAgICB0aGlzLkFkZENsYXNzKFRBUkdFVF9ERVRBSUwsXCJhY3RpdmVcIik7XG5cbiAgICAgICAgLy8gaWYoICF0aGlzLmFjY29yZGlvblswXS5jbGFzc0xpc3QgKSB7XG4gICAgICAgIC8vICAgICB0aGlzLmNsaWNrRmxhZyA9IGZhbHNlO1xuICAgICAgICAvLyB9IGVsc2Uge1xuICAgICAgICAvLyAgICAgVEFSR0VUX0RFVEFJTC5hZGRFdmVudExpc3RlbmVyKFwidHJhbnNpdGlvbmVuZFwiLCBFbmRGdW5jLCBmYWxzZSk7XG4gICAgICAgIC8vIH1cbiAgICAgICAgdGhpcy5jbGlja0ZsYWcgPSBmYWxzZTtcbiAgICB9XG5cblxuICAgIG1nbkFjY29yZGlvbi5wcm90b3R5cGUuQ2xvc2UgPSBmdW5jdGlvbiggZWxlbWVudCApIHtcblxuICAgICAgICAvLyBjb25zb2xlLmxvZyggZWxlbWVudCApO1xuXG4gICAgICAgIHZhciB0aGlzXyA9IHRoaXM7XG5cbiAgICAgICAgaWYoIXRoaXMuYWNjb3JkaW9uWzBdKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCB0aGlzLnNlbGVjdG9yICsgXCI6IE5vdCBGb3VuZFwiICk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmNsaWNrRmxhZyA9IHRydWU7XG5cbiAgICAgICAgdmFyIFRBUkdFVCA9IGVsZW1lbnQuY3VycmVudFRhcmdldCA/IGVsZW1lbnQuY3VycmVudFRhcmdldCA6IGVsZW1lbnQ7XG4gICAgICAgIHZhciBQQVJFTlQgPSB0aGlzLkdldFBhcmVudCggVEFSR0VULCB0aGlzLnNlbGVjdG9yICk7XG5cbiAgICAgICAgdmFyIElOREVYID0gQXJyYXkucHJvdG90eXBlLmluZGV4T2YuY2FsbCggUEFSRU5ULnF1ZXJ5U2VsZWN0b3JBbGwoIHRoaXMuYnRuRWxtICksIFRBUkdFVCApO1xuXG4gICAgICAgIHZhciBUQVJHRVRfREVUQUlMID0gUEFSRU5ULnF1ZXJ5U2VsZWN0b3JBbGwodGhpcy5kZXRhaWxFbG0pW0lOREVYXTtcblxuICAgICAgICAvLyB2YXIgRW5kRnVuYyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gICAgIHRoaXNfLmNsaWNrRmxhZyA9IGZhbHNlO1xuICAgICAgICAvLyAgICAgdGhpc18uQ2xvc2VFbmQoSU5ERVgpO1xuICAgICAgICAvLyAgICAgVEFSR0VULnN0eWxlLnBvaW50ZXJFdmVudHMgPSBcImluaGVyaXRcIjtcbiAgICAgICAgLy8gICAgIC8vIFRBUkdFVF9ERVRBSUwuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICAgICAgICAvLyAgICAgVEFSR0VUX0RFVEFJTC5yZW1vdmVFdmVudExpc3RlbmVyKFwidHJhbnNpdGlvbmVuZFwiLCBFbmRGdW5jKTtcbiAgICAgICAgLy8gfTtcblxuICAgICAgICAvL1xuXG4gICAgICAgIHRoaXMuUmVtb3ZlQ2xhc3MoVEFSR0VULFwiYWN0aXZlXCIpO1xuICAgICAgICB0aGlzLlJlbW92ZUNsYXNzKFRBUkdFVF9ERVRBSUwsXCJhY3RpdmVcIik7XG5cbiAgICAgICAgVEFSR0VUX0RFVEFJTC5zdHlsZS5tYXhIZWlnaHQgPSBUQVJHRVRfREVUQUlMLnNjcm9sbEhlaWdodCArIFwicHhcIjtcbiAgICAgICAgc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzXy5BZGRUcmFuc2l0aW9uKFRBUkdFVF9ERVRBSUwpO1xuICAgICAgICAgICAgVEFSR0VUX0RFVEFJTC5zdHlsZS5tYXhIZWlnaHQgPSBcIjBweFwiO1xuICAgICAgICB9LCAxMCk7XG5cbiAgICAgICAgLy8gaWYoICF0aGlzLmFjY29yZGlvblswXS5jbGFzc0xpc3QgKSB7IC8vSUU5XG5cbiAgICAgICAgLy8gICAgIC8vIFRBUkdFVF9ERVRBSUwuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICAgICAgICAvLyAgICAgdGhpcy5jbGlja0ZsYWcgPSBmYWxzZTtcblxuICAgICAgICAvLyB9IGVsc2Uge1xuXG4gICAgICAgIC8vICAgICBUQVJHRVRfREVUQUlMLmFkZEV2ZW50TGlzdGVuZXIoXCJ0cmFuc2l0aW9uZW5kXCIsIEVuZEZ1bmMsIGZhbHNlKTtcblxuICAgICAgICAvLyB9XG4gICAgICAgIHRoaXMuY2xpY2tGbGFnID0gZmFsc2U7XG4gICAgfVxuXG4gICAgbWduQWNjb3JkaW9uLnByb3RvdHlwZS5DbG9zZUlnbm9yZVRoaXMgPSBmdW5jdGlvbiggZWxlbWVudCApIHtcblxuICAgICAgICBpZighdGhpcy5hY2NvcmRpb25bMF0pIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoIHRoaXMuc2VsZWN0b3IgKyBcIjogTm90IEZvdW5kXCIgKTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBUQVJHRVQgPSBlbGVtZW50O1xuICAgICAgICB2YXIgUEFSRU5UID0gdGhpcy5HZXRQYXJlbnQoIFRBUkdFVCwgdGhpcy5zZWxlY3RvciApO1xuXG4gICAgICAgIHZhciBJTkRFWCA9IEFycmF5LnByb3RvdHlwZS5pbmRleE9mLmNhbGwoIFBBUkVOVC5xdWVyeVNlbGVjdG9yQWxsKCB0aGlzLmJ0bkVsbSApLCBUQVJHRVQgKTtcblxuICAgICAgICB2YXIgVEFSR0VUX0JUTiA9IFBBUkVOVC5xdWVyeVNlbGVjdG9yQWxsKCB0aGlzLmJ0bkVsbSApO1xuICAgICAgICB2YXIgVEFSR0VUX0RFVEFJTCA9IFBBUkVOVC5xdWVyeVNlbGVjdG9yQWxsKCB0aGlzLmRldGFpbEVsbSApO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgVEFSR0VUX0JUTi5sZW5ndGg7IGkrKykge1xuXG4gICAgICAgICAgICBpZiggaSAhPSBJTkRFWCApIHtcbiAgICAgICAgICAgICAgICBUQVJHRVRfQlROW2ldLmNsYXNzTGlzdC5yZW1vdmUoXCJhY3RpdmVcIik7XG4gICAgICAgICAgICAgICAgQ2xvc2VfKCBpICk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgICAgIC8vXG5cbiAgICAgICAgZnVuY3Rpb24gQ2xvc2VfKCBpICkge1xuXG4gICAgICAgICAgICBUQVJHRVRfREVUQUlMW2ldLmNsYXNzTGlzdC5yZW1vdmUoXCJhY3RpdmVcIik7XG5cbiAgICAgICAgICAgIHNldFRpbWVvdXQoIGZ1bmN0aW9uKCkgeyBUQVJHRVRfREVUQUlMW2ldLnN0eWxlLm1heEhlaWdodCA9IFwiMHB4XCI7IH0sIDEwMCk7XG5cbiAgICAgICAgfVxuXG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAqKlxuICAgICoqIEdldFBhcmVudFxuICAgICoqXG4gICAgKiovXG4gICAgbWduQWNjb3JkaW9uLnByb3RvdHlwZS5HZXRQYXJlbnQgPSBmdW5jdGlvbiggZWxlbWVudCwgdGFyZ2V0ICkge1xuXG4gICAgICAgIHZhciBwYXJlbnQgPSBlbGVtZW50LFxuICAgICAgICAgICAgaSA9IDAsXG4gICAgICAgICAgICB0O1xuXG4gICAgICAgIGlmICggdGFyZ2V0LnNwbGl0KFwiLlwiKVsxXSApIHtcblxuICAgICAgICAgICAgdCA9IHRhcmdldC5zcGxpdChcIi5cIilbMV07XG5cbiAgICAgICAgfSBlbHNlIGlmICggdGFyZ2V0LnNwbGl0KFwiI1wiKVsxXSApIHtcblxuICAgICAgICAgICAgdCA9IHRhcmdldC5zcGxpdChcIiNcIilbMV07XG5cbiAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgdCA9IHRhcmdldDtcblxuICAgICAgICB9XG5cbiAgICAgICAgd2hpbGUgKCBpIDwgMTAwICl7XG5cbiAgICAgICAgICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnROb2RlO1xuXG4gICAgICAgICAgICBpZiggcGFyZW50LnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PSB0ICkgYnJlYWs7XG5cbiAgICAgICAgICAgIGlmKCBwYXJlbnQuY2xhc3NOYW1lICkge1xuICAgICAgICAgICAgICAgIGlmKCBwYXJlbnQuY2xhc3NOYW1lLm1hdGNoKCB0ICkgKSBicmVhaztcbiAgICAgICAgICAgIH0gZWxzZSBpZiggcGFyZW50LmlkICkge1xuICAgICAgICAgICAgICAgIGlmKCBwYXJlbnQuaWQubWF0Y2goIHQgKSApIGJyZWFrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpKys7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBwYXJlbnQ7XG5cbiAgICB9XG5cbiAgICBtZ25BY2NvcmRpb24ucHJvdG90eXBlLkFkZENsYXNzID0gZnVuY3Rpb24oIGVsZW1lbnQsIF9jbGFzc05hbWUgKSB7XG5cbiAgICAgICAgaWYgKGVsZW1lbnQuY2xhc3NMaXN0KSB7XG4gICAgICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoX2NsYXNzTmFtZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBlbGVtZW50LmNsYXNzTmFtZSArPSAnICcgKyBfY2xhc3NOYW1lO1xuICAgICAgICB9XG5cbiAgICB9XG4gICAgbWduQWNjb3JkaW9uLnByb3RvdHlwZS5SZW1vdmVDbGFzcyA9IGZ1bmN0aW9uKCBlbGVtZW50LCBfY2xhc3NOYW1lICkge1xuXG4gICAgICAgIGlmIChlbGVtZW50LmNsYXNzTGlzdCkge1xuICAgICAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKF9jbGFzc05hbWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZWxlbWVudC5jbGFzc05hbWUgPSBlbGVtZW50LmNsYXNzTmFtZS5yZXBsYWNlKG5ldyBSZWdFeHAoJyhefFxcXFxiKScgKyBfY2xhc3NOYW1lLnNwbGl0KCcgJykuam9pbignfCcpICsgJyhcXFxcYnwkKScsICdnaScpLCAnICcpO1xuICAgICAgICB9XG5cbiAgICB9XG4gICAgbWduQWNjb3JkaW9uLnByb3RvdHlwZS5IYXNDbGFzcyA9IGZ1bmN0aW9uKCBlbGVtZW50LCBfY2xhc3NOYW1lICkge1xuXG4gICAgICAgIHZhciBpZ25vcmUgPSBmYWxzZTtcblxuICAgICAgICBpZiAoZWxlbWVudC5jbGFzc0xpc3QpIHtcbiAgICAgICAgICAgIGlmKCBlbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhfY2xhc3NOYW1lKSApIGlnbm9yZSA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiggbmV3IFJlZ0V4cCgnKF58ICknICsgX2NsYXNzTmFtZSArICcoIHwkKScsICdnaScpLnRlc3QoIGVsZW1lbnQuY2xhc3NOYW1lICkgKSBpZ25vcmUgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGlnbm9yZTtcblxuICAgIH1cblxuICAgIHJldHVybiBtZ25BY2NvcmRpb247XG5cbn0pKTtcbiIsIi8qXG5cbk1lZ2FuZSBUZW1wbGF0ZVxuXG5XZWJzaXRlOiBodHRwOi8vbWVnYW5lLXRlbXBsYXRlLmNvbS9cbkxpY2Vuc2U6IERlbnRzdSBJc29iYXIgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cblxuKi9cbihmdW5jdGlvbihyb290LCBmYWN0b3J5KSB7XG4gICAgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICAgICAgICBkZWZpbmUoZmFjdG9yeSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcm9vdC5tZ25NZW51ID0gZmFjdG9yeSgpO1xuICAgIH1cbn0odGhpcywgZnVuY3Rpb24oKSB7XG5cbiAgICBmdW5jdGlvbiBtZ25NZW51KHNlbGVjdG9yLCBvcHRpb24pIHtcblxuICAgICAgICB0aGlzLnNlbGVjdG9yID0gc2VsZWN0b3I7XG4gICAgICAgIHRoaXMubWVudSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoIHRoaXMuc2VsZWN0b3IgKVswXTtcblxuICAgICAgICAvL29wdGlvblxuICAgICAgICBpZihvcHRpb24gPT0gbnVsbCkgb3B0aW9uID0ge307XG4gICAgICAgIHRoaXMuZ2xvYmFsTmF2ID0gb3B0aW9uLmdsb2JhbE5hdiA/IG9wdGlvbi5nbG9iYWxOYXYgOiBcIiNnbG9iYWxuYXZcIjtcbiAgICAgICAgdGhpcy5hY3RpdmVOYW1lID0gb3B0aW9uLmFjdGl2ZU5hbWUgPyBvcHRpb24uYWN0aXZlTmFtZSA6IFwiYWN0aXZlXCI7XG4gICAgICAgIHRoaXMuY2xvc2VQb2ludCA9IG9wdGlvbi5jbG9zZVBvaW50ID8gb3B0aW9uLmNsb3NlUG9pbnQgOiBudWxsO1xuXG4gICAgICAgIHRoaXMubm9TY3JvbGwgPSBvcHRpb24ubm9TY3JvbGwgIT0gbnVsbCA/IG9wdGlvbi5ub1Njcm9sbCA6IHRydWU7XG4gICAgICAgIHRoaXMuZ2xvYmFsTmF2RWxtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCggdGhpcy5nbG9iYWxOYXYgKVswXTtcblxuICAgICAgICB0aGlzLmZsYWcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5zY3JvbGxWYWwgPSBudWxsO1xuICAgICAgICB0aGlzLmJhc2VXaW5XaWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoO1xuXG4gICAgICAgIHRoaXMuT3BlblN0YXJ0ID0gZnVuY3Rpb24oKXt9O1xuICAgICAgICB0aGlzLk9wZW5FbmQgPSBmdW5jdGlvbigpe307XG4gICAgICAgIHRoaXMuQ2xvc2VTdGFydCA9IGZ1bmN0aW9uKCl7fTtcbiAgICAgICAgdGhpcy5DbG9zZUVuZCA9IGZ1bmN0aW9uKCl7fTtcblxuICAgICAgICBpZiggdGhpcy5tZW51ICkge1xuICAgICAgICAgICAgdGhpcy5Jbml0KCk7XG4gICAgICAgIH1cblxuICAgIH1cblxuXG4gICAgLyoqXG4gICAgKipcbiAgICAqKiBJbml0XG4gICAgKipcbiAgICAqKi9cbiAgICBtZ25NZW51LnByb3RvdHlwZS5Jbml0ID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIHRoaXNfID0gdGhpcztcblxuICAgICAgICB0aGlzLm1lbnUuYWRkRXZlbnRMaXN0ZW5lciggXCJjbGlja1wiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICF0aGlzXy5mbGFnID8gdGhpc18uT3BlbigpIDogdGhpc18uQ2xvc2UoKTtcbiAgICAgICAgfSApXG5cbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoIFwicmVzaXplXCIsIGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICB2YXIgV0lOX1dJRFRIID0gd2luZG93LmlubmVyV2lkdGg7XG5cbiAgICBcdFx0aWYoIHRoaXNfLmNsb3NlUG9pbnQgJiYgdGhpc18uZmxhZyApIHtcblxuICAgIFx0XHRcdGlmKCB0aGlzXy5iYXNlV2luV2lkdGggPCBXSU5fV0lEVEggKSB7Ly/lj7NcblxuICAgIFx0XHRcdFx0aWYoICh0aGlzXy5iYXNlV2luV2lkdGggPCB0aGlzXy5jbG9zZVBvaW50KSAmJiAoIHRoaXNfLmNsb3NlUG9pbnQgPCBXSU5fV0lEVEggKSApIHtcbiAgICBcdFx0XHRcdFx0dGhpc18uQ2xvc2UoKTtcbiAgICBcdFx0XHRcdH1cblxuICAgIFx0XHRcdH0gZWxzZSB7Ly/lt6ZcblxuICAgIFx0XHRcdFx0aWYoICh0aGlzXy5iYXNlV2luV2lkdGggPiB0aGlzXy5jbG9zZVBvaW50KSAmJiAoIHRoaXNfLmNsb3NlUG9pbnQgPiBXSU5fV0lEVEggKSApIHtcbiAgICBcdFx0XHRcdFx0dGhpc18uQ2xvc2UoKTtcbiAgICBcdFx0XHRcdH1cblxuICAgIFx0XHRcdH1cbiAgICBcdFx0XHR0aGlzXy5iYXNlV2luV2lkdGggPSBXSU5fV0lEVEg7XG5cbiAgICBcdFx0fVxuXG5cbiAgICAgICAgfSApO1xuXG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAqKlxuICAgICoqIE9wZW5cbiAgICAqKlxuICAgICoqL1xuICAgIG1nbk1lbnUucHJvdG90eXBlLk9wZW4gPSBmdW5jdGlvbihpKSB7XG5cblxuICAgICAgICBpZiggIXRoaXMubWVudSApIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoIHRoaXMuc2VsZWN0b3IgKyBcIjogTm90IEZvdW5kXCIgKTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB0aGlzXyA9IHRoaXM7XG4gICAgICAgIHRoaXMuc2Nyb2xsVmFsID0gKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wKSB8fCBkb2N1bWVudC5ib2R5LnNjcm9sbFRvcDtcblxuICAgICAgICB0aGlzXy5PcGVuU3RhcnQoKTtcblxuICAgICAgICB0aGlzLkFkZENsYXNzKHRoaXMubWVudSx0aGlzLmFjdGl2ZU5hbWUpO1xuICAgICAgICB0aGlzLkFkZENsYXNzKHRoaXMuZ2xvYmFsTmF2RWxtLHRoaXMuYWN0aXZlTmFtZSk7XG5cbiAgICAgICAgdmFyIEVuZEZ1bmMgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXNfLk9wZW5FbmQoKTtcbiAgICAgICAgICAgIHRoaXNfLmdsb2JhbE5hdkVsbS5yZW1vdmVFdmVudExpc3RlbmVyKFwidHJhbnNpdGlvbmVuZFwiLCBFbmRGdW5jKTtcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLmdsb2JhbE5hdkVsbS5hZGRFdmVudExpc3RlbmVyKFwidHJhbnNpdGlvbmVuZFwiLCBFbmRGdW5jLCBmYWxzZSk7XG5cbiAgICAgICAgaWYoIHRoaXMubm9TY3JvbGwgKSB7XG5cbiAgICAgICAgICAgIHRoaXMuaHRtbFRhZyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiaHRtbFwiKVswXTtcblxuICAgICAgICAgICAgdmFyIGNzcyA9ICBcInBvc2l0aW9uOiBmaXhlZDsgXCI7XG4gICAgICAgICAgICAgICAgY3NzICs9IFwid2lkdGg6IDEwMCU7IFwiO1xuICAgICAgICAgICAgICAgIGNzcyArPSBcInRvcDpcIisgKC10aGlzLnNjcm9sbFZhbCkgK1wicHg7XCI7XG5cbiAgICAgICAgICAgIHRoaXMuaHRtbFRhZy5zdHlsZS5jc3NUZXh0ID0gY3NzO1xuXG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmZsYWcgPSB0cnVlO1xuXG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAqKlxuICAgICoqIENsb3NlXG4gICAgKipcbiAgICAqKi9cbiAgICBtZ25NZW51LnByb3RvdHlwZS5DbG9zZSA9IGZ1bmN0aW9uKCkge1xuXG5cbiAgICAgICAgaWYoICF0aGlzLm1lbnUgKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCB0aGlzLnNlbGVjdG9yICsgXCI6IE5vdCBGb3VuZFwiICk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdGhpc18gPSB0aGlzO1xuXG4gICAgICAgIHRoaXNfLkNsb3NlU3RhcnQoKTtcblxuICAgICAgICBpZiggdGhpcy5ub1Njcm9sbCApIHRoaXMuaHRtbFRhZy5zdHlsZS5wb3NpdGlvbiA9IFwic3RhdGljXCI7XG5cbiAgICAgICAgaWYoIHRoaXMubm9TY3JvbGwgKSB7XG4gICAgICAgICAgICB3aW5kb3cuc2Nyb2xsKCAwLCB0aGlzLnNjcm9sbFZhbCApO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5SZW1vdmVDbGFzcyh0aGlzLm1lbnUsdGhpcy5hY3RpdmVOYW1lKTtcbiAgICAgICAgdGhpcy5SZW1vdmVDbGFzcyh0aGlzLmdsb2JhbE5hdkVsbSx0aGlzLmFjdGl2ZU5hbWUpO1xuXG4gICAgICAgIHZhciBFbmRGdW5jID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzXy5DbG9zZUVuZCgpO1xuICAgICAgICAgICAgdGhpc18uZ2xvYmFsTmF2RWxtLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0cmFuc2l0aW9uZW5kXCIsIEVuZEZ1bmMpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuZ2xvYmFsTmF2RWxtLmFkZEV2ZW50TGlzdGVuZXIoXCJ0cmFuc2l0aW9uZW5kXCIsIEVuZEZ1bmMsIGZhbHNlKTtcblxuICAgICAgICB0aGlzLmZsYWcgPSBmYWxzZTtcblxuICAgIH1cblxuICAgIG1nbk1lbnUucHJvdG90eXBlLkFkZENsYXNzID0gZnVuY3Rpb24oIGVsZW1lbnQsIF9jbGFzc05hbWUgKSB7XG5cbiAgICAgICAgaWYgKGVsZW1lbnQuY2xhc3NMaXN0KSB7XG4gICAgICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoX2NsYXNzTmFtZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBlbGVtZW50LmNsYXNzTmFtZSArPSAnICcgKyBfY2xhc3NOYW1lO1xuICAgICAgICB9XG5cbiAgICB9XG4gICAgbWduTWVudS5wcm90b3R5cGUuUmVtb3ZlQ2xhc3MgPSBmdW5jdGlvbiggZWxlbWVudCwgX2NsYXNzTmFtZSApIHtcblxuICAgICAgICBpZiAoZWxlbWVudC5jbGFzc0xpc3QpIHtcbiAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShfY2xhc3NOYW1lKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NOYW1lID0gZWxlbWVudC5jbGFzc05hbWUucmVwbGFjZShuZXcgUmVnRXhwKCcoXnxcXFxcYiknICsgX2NsYXNzTmFtZS5zcGxpdCgnICcpLmpvaW4oJ3wnKSArICcoXFxcXGJ8JCknLCAnZ2knKSwgJyAnKTtcbiAgICAgICAgfVxuXG4gICAgfVxuXG4gICAgcmV0dXJuIG1nbk1lbnU7XG5cbn0pKTtcbiIsIi8qXG5cbk1lZ2FuZSBUZW1wbGF0ZVxuXG5XZWJzaXRlOiBodHRwOi8vbWVnYW5lLXRlbXBsYXRlLmNvbS9cbkxpY2Vuc2U6IERlbnRzdSBJc29iYXIgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cblxuKi9cblxuKGZ1bmN0aW9uKHJvb3QsIGZhY3RvcnkpIHtcbiAgICBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgICAgIGRlZmluZShmYWN0b3J5KTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jykge1xuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByb290Lm1nblVhID0gZmFjdG9yeSgpO1xuICAgIH1cbn0odGhpcywgZnVuY3Rpb24oKSB7XG5cbiAgICBmdW5jdGlvbiBtZ25VYSgpIHtcblxuICAgICAgICB0aGlzLl91YSA9IG5hdmlnYXRvci51c2VyQWdlbnQ7XG4gICAgICAgIHRoaXMuX3ZlciA9IG5hdmlnYXRvci5hcHBWZXJzaW9uO1xuXG4gICAgICAgIHZhciB1YSA9IHRoaXMuX3VhLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIHZhciB2ZXIgPSB0aGlzLl92ZXIudG9Mb3dlckNhc2UoKTtcblxuICAgICAgICAvLyBJRSgxMeS7peWklilcbiAgICAgICAgdGhpcy5pc01TSUUgPSAodWEuaW5kZXhPZignbXNpZScpID4gLTEpICYmICh1YS5pbmRleE9mKCdvcGVyYScpID09IC0xKTtcbiAgICAgICAgLy8gSUU2XG4gICAgICAgIHRoaXMuaXNJRTYgPSB0aGlzLmlzTVNJRSAmJiAodmVyLmluZGV4T2YoJ21zaWUgNi4nKSA+IC0xKTtcbiAgICAgICAgLy8gSUU3XG4gICAgICAgIHRoaXMuaXNJRTcgPSB0aGlzLmlzTVNJRSAmJiAodmVyLmluZGV4T2YoJ21zaWUgNy4nKSA+IC0xKTtcbiAgICAgICAgLy8gSUU4XG4gICAgICAgIHRoaXMuaXNJRTggPSB0aGlzLmlzTVNJRSAmJiAodmVyLmluZGV4T2YoJ21zaWUgOC4nKSA+IC0xKTtcbiAgICAgICAgLy8gSUU5XG4gICAgICAgIHRoaXMuaXNJRTkgPSB0aGlzLmlzTVNJRSAmJiAodmVyLmluZGV4T2YoJ21zaWUgOS4nKSA+IC0xKTtcbiAgICAgICAgLy8gSUUxMFxuICAgICAgICB0aGlzLmlzSUUxMCA9IHRoaXMuaXNNU0lFICYmICh2ZXIuaW5kZXhPZignbXNpZSAxMC4nKSA+IC0xKTtcbiAgICAgICAgLy8gSUUxMVxuICAgICAgICB0aGlzLmlzSUUxMSA9ICh1YS5pbmRleE9mKCd0cmlkZW50LzcnKSA+IC0xKTtcbiAgICAgICAgLy8gSUVcbiAgICAgICAgdGhpcy5pc0lFID0gdGhpcy5pc01TSUUgfHwgdGhpcy5pc0lFMTE7XG4gICAgICAgIC8vIEVkZ2VcbiAgICAgICAgdGhpcy5pc0VkZ2UgPSAodWEuaW5kZXhPZignZWRnZScpID4gLTEpO1xuXG4gICAgICAgIC8vIEdvb2dsZSBDaHJvbWVcbiAgICAgICAgdGhpcy5pc0Nocm9tZSA9ICh1YS5pbmRleE9mKCdjaHJvbWUnKSA+IC0xKSAmJiAodWEuaW5kZXhPZignZWRnZScpID09IC0xKTtcbiAgICAgICAgLy8gRmlyZWZveFxuICAgICAgICB0aGlzLmlzRmlyZWZveCA9ICh1YS5pbmRleE9mKCdmaXJlZm94JykgPiAtMSk7XG4gICAgICAgIC8vIFNhZmFyaVxuICAgICAgICB0aGlzLmlzU2FmYXJpID0gKHVhLmluZGV4T2YoJ3NhZmFyaScpID4gLTEpICYmICh1YS5pbmRleE9mKCdjaHJvbWUnKSA9PSAtMSk7XG4gICAgICAgIC8vIE9wZXJhXG4gICAgICAgIHRoaXMuaXNPcGVyYSA9ICh1YS5pbmRleE9mKCdvcGVyYScpID4gLTEpO1xuXG5cbiAgICAgICAgLy8gaVBob25lXG4gICAgICAgIHRoaXMuaXNJcGhvbmUgPSB1YS5pbmRleE9mKCdpcGhvbmUnKSA+IDA7XG4gICAgICAgIC8vIGlQb2RcbiAgICAgICAgdGhpcy5pc0lwb2QgPSB1YS5pbmRleE9mKCdpcG9kJykgPiAwO1xuICAgICAgICAvLyBBbmRyb2lkXG4gICAgICAgIHRoaXMuaXNBbmRyb2lkID0gKHVhLmluZGV4T2YoJ2FuZHJvaWQnKSA+IDApICYmICh1YS5pbmRleE9mKCdtb2JpbGUnKSA+IDApO1xuICAgICAgICAvLyBXaW5kb3dzIFBob25lXG4gICAgICAgIHRoaXMuaXNXaW5QaG9uZSA9IHVhLmluZGV4T2YoJ3dpbmRvd3MgcGhvbmUnKSA+IDA7XG4gICAgICAgIC8vIGlQYWRcbiAgICAgICAgdGhpcy5pc0lwYWQgPSB1YS5pbmRleE9mKCdpcGFkJykgPiAwO1xuICAgICAgICAvLyBBbmRyb2lkIFRhYmxldCAoQW5kcm9pZCA0LjHjgJwpXG4gICAgICAgIHRoaXMuaXNBbmRyb2lkVGFiID0gKHVhLmluZGV4T2YoJ2FuZHJvaWQnKSA+IDAgJiYgdWEuaW5kZXhPZignbW9iaWxlJykgPT0gLTEpO1xuXG4gICAgICAgIC8vIFNwXG4gICAgICAgIHRoaXMuaXNTcCA9IHRoaXMuaXNJcGhvbmUgfHwgdGhpcy5pc0lwb2QgfHwgdGhpcy5pc0FuZHJvaWQgfHwgdGhpcy5pc1dpblBob25lO1xuICAgICAgICAvLyBUYWJcbiAgICAgICAgdGhpcy5pc1RhYiA9IHRoaXMuaXNJcGFkIHx8IHRoaXMuaXNBbmRyb2lkVGFiO1xuICAgICAgICAvLyBUb3VjaCBEZXZpY2VcbiAgICAgICAgdGhpcy5pc1RvdWNoID0gKCdjcmVhdGVUb3VjaCcgaW4gZG9jdW1lbnQpIHx8ICgnb250b3VjaHN0YXJ0JyBpbiBkb2N1bWVudCk7XG5cbiAgICB9XG5cbiAgICBtZ25VYS5wcm90b3R5cGUuR2V0SW9zVmVyc2lvbiA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciB2LCB2ZXJzaW9ucztcbiAgICAgICAgaWYgKCB0aGlzLmlzSXBob25lIHx8IHRoaXMuaXNJcG9kIHx8IHRoaXMuaXNJcGFkICkge1xuICAgICAgICAgICAgdiA9ICh0aGlzLl92ZXIpLm1hdGNoKC9PUyAoXFxkKylfKFxcZCspXz8oXFxkKyk/Lyk7XG4gICAgICAgICAgICB2ZXJzaW9ucyA9IFtwYXJzZUludCh2WzFdLCAxMCksIHBhcnNlSW50KHZbMl0sIDEwKSwgcGFyc2VJbnQodlszXSB8fCAwLCAxMCldO1xuICAgICAgICAgICAgcmV0dXJuIE51bWJlcih2ZXJzaW9uc1swXStcIi5cIit2ZXJzaW9uc1sxXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZlcnNpb25zO1xuXG4gICAgfVxuXG4gICAgbWduVWEucHJvdG90eXBlLkdldEFuZHJvaWRWZXJzaW9uID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgaWYoIHRoaXMuaXNBbmRyb2lkICkge1xuICAgICAgICAgICAgcmV0dXJuIE51bWJlcihwYXJzZUZsb2F0KCB0aGlzLl91YS5zbGljZSh0aGlzLl91YS5pbmRleE9mKFwiQW5kcm9pZFwiKSs4KSApKTtcbiAgICAgICAgfVxuXG4gICAgfVxuXG4gICAgcmV0dXJuIG1nblVhO1xuXG59KSk7XG4iLCIvKlxuXG5NZWdhbmUgVGVtcGxhdGVcblxuV2Vic2l0ZTogaHR0cDovL21lZ2FuZS10ZW1wbGF0ZS5jb20vXG5MaWNlbnNlOiBEZW50c3UgSXNvYmFyIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG5cbiovXG5cbihmdW5jdGlvbihyb290LCBmYWN0b3J5KSB7XG4gICAgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICAgICAgICBkZWZpbmUoZmFjdG9yeSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGpxID0gZmFjdG9yeSgpO1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4ganEpIHJvb3Rba2V5XSA9IGpxW2tleV1cbiAgICB9XG59KHRoaXMsIGZ1bmN0aW9uKCkge1xuXG4gICAgdmFyIEFkZENsYXNzID0gZnVuY3Rpb24oIGVsZW1lbnQsIF9jbGFzc05hbWUgKSB7XG5cbiAgICAgICAgaWYgKGVsZW1lbnQuY2xhc3NMaXN0KSB7XG4gICAgICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoX2NsYXNzTmFtZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBlbGVtZW50LmNsYXNzTmFtZSArPSAnICcgKyBfY2xhc3NOYW1lO1xuICAgICAgICB9XG5cbiAgICB9XG5cbiAgICB2YXIgUmVtb3ZlQ2xhc3MgPSBmdW5jdGlvbiggZWxlbWVudCwgX2NsYXNzTmFtZSApIHtcblxuICAgICAgICBpZiAoZWxlbWVudC5jbGFzc0xpc3QpIHtcbiAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShfY2xhc3NOYW1lKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NOYW1lID0gZWxlbWVudC5jbGFzc05hbWUucmVwbGFjZShuZXcgUmVnRXhwKCcoXnxcXFxcYiknICsgX2NsYXNzTmFtZS5zcGxpdCgnICcpLmpvaW4oJ3wnKSArICcoXFxcXGJ8JCknLCAnZ2knKSwgJyAnKTtcbiAgICAgICAgfVxuXG4gICAgfVxuXG4gICAgdmFyIEhhc0NsYXNzID0gZnVuY3Rpb24oIGVsZW1lbnQsIF9jbGFzc05hbWUgKSB7XG5cbiAgICAgICAgdmFyIGlnbm9yZSA9IGZhbHNlO1xuXG4gICAgICAgIGlmIChlbGVtZW50LmNsYXNzTGlzdCkge1xuICAgICAgICAgICAgaWYoIGVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKF9jbGFzc05hbWUpICkgaWdub3JlID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmKCBuZXcgUmVnRXhwKCcoXnwgKScgKyBfY2xhc3NOYW1lICsgJyggfCQpJywgJ2dpJykudGVzdCggZS50YXJnZXQuY2xhc3NOYW1lICkgKSBpZ25vcmUgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGlnbm9yZTtcblxuICAgIH1cblxuICAgIHZhciBUb2dnbGVDbGFzcyA9IGZ1bmN0aW9uKCBlbGVtZW50LCBfY2xhc3NOYW1lICkge1xuXG4gICAgICAgIGlmIChlbGVtZW50LmNsYXNzTGlzdCkge1xuICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LnRvZ2dsZShjbGFzc05hbWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBjbGFzc2VzID0gZWxlbWVudC5jbGFzc05hbWUuc3BsaXQoJyAnKTtcbiAgICAgICAgICB2YXIgZXhpc3RpbmdJbmRleCA9IGNsYXNzZXMuaW5kZXhPZihjbGFzc05hbWUpO1xuXG4gICAgICAgICAgaWYgKGV4aXN0aW5nSW5kZXggPj0gMClcbiAgICAgICAgICAgIGNsYXNzZXMuc3BsaWNlKGV4aXN0aW5nSW5kZXgsIDEpO1xuICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIGNsYXNzZXMucHVzaChjbGFzc05hbWUpO1xuXG4gICAgICAgICAgZWxlbWVudC5jbGFzc05hbWUgPSBjbGFzc2VzLmpvaW4oJyAnKTtcbiAgICAgICAgfVxuXG4gICAgfVxuXG4gICAgdmFyIFNldENzcyA9IGZ1bmN0aW9uKCBlbGVtZW50LCBzdHlsZXMgKSB7XG5cbiAgICAgICAgdmFyIGNzcyA9IFwiXCI7XG5cbiAgICAgICAgZm9yICh2YXIga2V5IGluIHN0eWxlcykge1xuICAgICAgICAgICAgY3NzICs9IFwiXCIrIGtleSArXCI6XCIrIHN0eWxlc1trZXldICtcIjsgXCI7XG4gICAgICAgIH1cblxuICAgICAgICBlbGVtZW50LnN0eWxlLmNzc1RleHQgPSBjc3M7XG5cbiAgICB9XG5cbiAgICB2YXIgR2V0UGFyZW50cyA9IGZ1bmN0aW9uKCBlbGVtZW50LCB0YXJnZXQgKSB7XG5cbiAgICAgICAgdmFyIHBhcmVudCA9IGVsZW1lbnQsIGkgPSAwLCB0O1xuXG4gICAgICAgIGlmICggdGFyZ2V0LnNwbGl0KFwiLlwiKVsxXSApIHtcbiAgICAgICAgICAgIHQgPSB0YXJnZXQuc3BsaXQoXCIuXCIpWzFdO1xuICAgICAgICB9IGVsc2UgaWYgKCB0YXJnZXQuc3BsaXQoXCIjXCIpWzFdICkge1xuICAgICAgICAgICAgdCA9IHRhcmdldC5zcGxpdChcIiNcIilbMV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0ID0gdGFyZ2V0O1xuICAgICAgICB9XG4gICAgICAgIHdoaWxlICggaSA8IDEwMCApe1xuICAgICAgICAgICAgcGFyZW50ID0gcGFyZW50LnBhcmVudE5vZGU7XG4gICAgICAgICAgICBpZiggcGFyZW50LnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PSB0ICkgYnJlYWs7XG4gICAgICAgICAgICBpZiggcGFyZW50LmNsYXNzTmFtZSApIHtcbiAgICAgICAgICAgICAgICBpZiggcGFyZW50LmNsYXNzTmFtZS5tYXRjaCggdCApICkgYnJlYWs7XG4gICAgICAgICAgICB9IGVsc2UgaWYoIHBhcmVudC5pZCApIHtcbiAgICAgICAgICAgICAgICBpZiggcGFyZW50LmlkLm1hdGNoKCB0ICkgKSBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGkrKztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGFyZW50O1xuICAgIH1cblxuICAgIHZhciBHZXRTaWJsaW5ncyA9IGZ1bmN0aW9uKCBlbCwgdGFyZ2V0ICkge1xuXG4gICAgICAgIHZhciBzaWJsaW5ncyA9IEFycmF5LnByb3RvdHlwZS5maWx0ZXIuY2FsbChlbC5wYXJlbnROb2RlLmNoaWxkcmVuLCBmdW5jdGlvbihjaGlsZCxpKSB7XG5cbiAgICAgICAgICAgIHZhciB0YXJnZXRFbG0gPSBlbC5wYXJlbnROb2RlLnF1ZXJ5U2VsZWN0b3JBbGwodGFyZ2V0KTtcbiAgICAgICAgICAgIHZhciB0YXJnZXRfID0gbnVsbDtcblxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0YXJnZXRFbG0ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoY2hpbGQgPT09IHRhcmdldEVsbVtpXSkgdGFyZ2V0XyA9IHRhcmdldEVsbVtpXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGNoaWxkICE9PSBlbCAmJiBjaGlsZCA9PT0gdGFyZ2V0XztcblxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gc2libGluZ3MubGVuZ3RoICE9IDAgPyBzaWJsaW5ncyA6IG51bGw7XG5cbiAgICB9XG5cbiAgICB2YXIgR2V0T2Zmc2V0ID0gZnVuY3Rpb24oIGVsZW1lbnQgKSB7XG5cbiAgICAgICAgdmFyIEJPWCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHRvcDogQk9YLnRvcCArIHdpbmRvdy5wYWdlWU9mZnNldCAtIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRUb3AsXG4gICAgICAgICAgICBsZWZ0OiBCT1gubGVmdCArIHdpbmRvdy5wYWdlWE9mZnNldCAtIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRMZWZ0XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgR2V0SGVpZ2h0RGF0YSA9IGZ1bmN0aW9uKCBlbGVtZW50ICkge1xuXG4gICAgICAgIHZhciBTVFlMRVMgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSggZWxlbWVudCApO1xuICAgICAgICB2YXIgSCA9IGVsZW1lbnQub2Zmc2V0SGVpZ2h0O1xuICAgICAgICB2YXIgQlQgPSBwYXJzZUZsb2F0KFNUWUxFUy5ib3JkZXJUb3BXaWR0aCk7XG4gICAgICAgIHZhciBCQiA9IHBhcnNlRmxvYXQoU1RZTEVTLmJvcmRlckJvdHRvbVdpZHRoKTtcbiAgICAgICAgdmFyIFBUID0gcGFyc2VGbG9hdChTVFlMRVMucGFkZGluZ1RvcCk7XG4gICAgICAgIHZhciBQQiA9IHBhcnNlRmxvYXQoU1RZTEVTLnBhZGRpbmdCb3R0b20pO1xuXG4gICAgICAgIHZhciBEQVRBID0ge1xuICAgICAgICAgICAgXCJoZWlnaHRcIjogSCxcbiAgICAgICAgICAgIFwiYm9yZGVydG9wXCI6IEJULFxuICAgICAgICAgICAgXCJib3JkZXJCb3R0b21cIjogQkIsXG4gICAgICAgICAgICBcInBhZGRpbmdUb3BcIjogUFQsXG4gICAgICAgICAgICBcInBhZGRpbmdCb3R0b21cIjogUEIsXG4gICAgICAgICAgICBcIm91dGVySGVpZ2h0XCI6IEggKyBCVCArIEJCICsgUFQgKyBQQlxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIERBVEE7XG4gICAgfVxuXG4gICAgdmFyIEdldFdpZHRoRGF0YSA9IGZ1bmN0aW9uKCBlbGVtZW50ICkge1xuXG4gICAgICAgIHZhciBTVFlMRVMgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSggZWxlbWVudCApLFxuICAgICAgICAgICAgVyA9IGVsZW1lbnQub2Zmc2V0V2lkdGgsXG4gICAgICAgICAgICBCVCA9IHBhcnNlRmxvYXQoU1RZTEVTLmJvcmRlckxlZnRXaWR0aCksXG4gICAgICAgICAgICBCQiA9IHBhcnNlRmxvYXQoU1RZTEVTLmJvcmRlclJpZ2h0V2lkdGgpLFxuICAgICAgICAgICAgUFQgPSBwYXJzZUZsb2F0KFNUWUxFUy5wYWRkaW5nTGVmdCksXG4gICAgICAgICAgICBQQiA9IHBhcnNlRmxvYXQoU1RZTEVTLnBhZGRpbmdSaWdodCk7XG5cbiAgICAgICAgdmFyIERBVEEgPSB7XG4gICAgICAgICAgICBcIndpZHRoXCI6IFcsXG4gICAgICAgICAgICBcImJvcmRlckxlZnRcIjogQlQsXG4gICAgICAgICAgICBcImJvcmRlclJpZ2h0XCI6IEJCLFxuICAgICAgICAgICAgXCJwYWRkaW5nTGVmdFwiOiBQVCxcbiAgICAgICAgICAgIFwicGFkZGluZ1JpZ2h0XCI6IFBCLFxuICAgICAgICAgICAgXCJvdXRlcldpZHRoXCI6IFcgKyBCVCArIEJCICsgUFQgKyBQQlxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIERBVEE7XG4gICAgfVxuXG4gICAgdmFyIE5vdCA9IGZ1bmN0aW9uKCBlbGVtZW50LCBpZ25vcmVUeHQgKSB7XG5cbiAgICAgICAgdmFyIGlnbm9yZSA9IGZhbHNlLFxuICAgICAgICAgICAgSUdVTk9SRSA9IGlnbm9yZVR4dC5zcGxpdChcIi5cIilbMV0gPyBpZ25vcmVUeHQuc3BsaXQoXCIuXCIpWzFdIDogaWdub3JlVHh0LnNwbGl0KFwiI1wiKVsxXTtcblxuICAgICAgICBpZiAoZWxlbWVudC5jbGFzc0xpc3QpIHtcbiAgICAgICAgICAgIGlmKCBlbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhJR1VOT1JFKSApIGlnbm9yZSA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiggbmV3IFJlZ0V4cCgnKF58ICknICsgSUdVTk9SRSArICcoIHwkKScsICdnaScpLnRlc3QoIGVsZW1lbnQuY2xhc3NOYW1lICkgKSBpZ25vcmUgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmKCBlbGVtZW50LmlkID09IElHVU5PUkUgKSBpZ25vcmUgPSB0cnVlO1xuXG4gICAgICAgIHJldHVybiBpZ25vcmU7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgQWRkQ2xhc3M6IEFkZENsYXNzLFxuICAgICAgICBSZW1vdmVDbGFzczogUmVtb3ZlQ2xhc3MsXG4gICAgICAgIEhhc0NsYXNzOiBIYXNDbGFzcyxcbiAgICAgICAgU2V0Q3NzOiBTZXRDc3MsXG4gICAgICAgIEdldFBhcmVudHM6IEdldFBhcmVudHMsXG4gICAgICAgIEdldFNpYmxpbmdzOiBHZXRTaWJsaW5ncyxcbiAgICAgICAgTm90OiBOb3QsXG4gICAgICAgIEdldE9mZnNldDogR2V0T2Zmc2V0LFxuICAgICAgICBHZXRIZWlnaHREYXRhOiBHZXRIZWlnaHREYXRhLFxuICAgICAgICBHZXRXaWR0aERhdGE6IEdldFdpZHRoRGF0YVxuICAgIH07XG5cbn0pKTtcbiIsImltcG9ydCB7IEFkZENsYXNzLCBSZW1vdmVDbGFzcywgR2V0UGFyZW50cyB9IGZyb20gJ21nbi11dGlsaXR5JztcbmltcG9ydCBtZ25NZW51IGZyb20gJ21nbi1tZW51JztcblxuXG5leHBvcnQgZGVmYXVsdCAoKSA9PiB7XG5cblxuXHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cdC8vIE1lbnVcblx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5cdGlmKCBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuai1tZW51JykgKXtcblxuXHRcdGxldCBib2R5WU9mZnNldCA9IDAsXG5cdFx0b3Blbk1lbnVGbGFnID0gZmFsc2U7XG5cblx0XHRsZXQgbWVudSA9IG5ldyBtZ25NZW51KFxuXHRcdFx0XCIuai1tZW51XCIsXG5cdFx0XHR7XG5cdFx0XHRcdGdsb2JhbE5hdjogXCIuai1tZW51XCIsXG5cdFx0XHRcdGFjdGl2ZU5hbWU6IFwiaXMtb3BlblwiLFxuXHRcdFx0XHRjbG9zZVBvaW50OiA3NjgsXG5cdFx0XHRcdG5vU2Nyb2xsOiBmYWxzZVxuXHRcdFx0fVxuXHRcdCk7XG5cblxuXHRcdGNvbnN0IHNldE9wZW5GdW5jID0gKCkgPT4ge1xuXG5cdFx0XHRib2R5WU9mZnNldCA9IHdpbmRvdy5wYWdlWU9mZnNldDsgLy8g44K544Kv44Ot44O844Or5L2N572u44KS5L+d5a2YXG5cblx0XHRcdEFkZENsYXNzKCBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaHRtbCcpWzBdLCAnaXMtZ25hdl9vcGVuJyApO1xuXG5cdFx0XHRzZXRUaW1lb3V0KCAoKSA9PiB7XG5cdFx0XHRcdEFkZENsYXNzKCBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaHRtbCcpWzBdLCAnaXMtZ25hdl9maXgnICk7IC8vRklYRUToqK3lrprnlKhcblx0XHRcdFx0d2luZG93LnNjcm9sbFRvKCAwLCAwICk7XG5cdFx0XHR9LDIwMCApXG5cblx0XHR9XG5cblx0XHRjb25zdCBzZXRDbG9zZUZ1bmMgPSAoKSA9PiB7XG5cblx0XHRcdFJlbW92ZUNsYXNzKCBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaHRtbCcpWzBdLCAnaXMtZ25hdl9maXgnICk7XG5cdFx0XHR3aW5kb3cuc2Nyb2xsVG8oIDAsIGJvZHlZT2Zmc2V0ICk7XG5cblx0XHRcdHNldFRpbWVvdXQoICgpID0+IHtcblx0XHRcdFx0UmVtb3ZlQ2xhc3MoIGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdodG1sJylbMF0sICdpcy1nbmF2X29wZW4nICk7XG5cdFx0XHR9LDEwMCApXG5cdFx0fVxuXG5cdFx0bWVudS5PcGVuU3RhcnQgPSAoKSA9PiB7XG5cdFx0XHRzZXRPcGVuRnVuYygpO1xuXHRcdH1cblx0XHRtZW51LkNsb3NlU3RhcnQgPSAoKSA9PiB7XG5cdFx0XHRzZXRDbG9zZUZ1bmMoKTtcblx0XHR9XG5cblx0XHQvLyDjg6rjg7Pjgq/jgpLjgq/jg6rjg4Pjgq/jgZfjgZ/jgolNRU5V6ZaJ44GY44KL77yI5ZCM44Oa44O844K45YaF44Ki44Oz44Kr44O844Oq44Oz44Kv5a++562W77yJXG5cdFx0bGV0IGhlYWRlckxpbmsgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcubC1oZWFkZXJfX3BhZ2UgYScpO1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgaGVhZGVyTGluay5sZW5ndGg7IGkrKykge1xuXHRcdFx0aGVhZGVyTGlua1tpXS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcblx0XHRcdFx0bWVudS5DbG9zZSgpO1xuXHRcdFx0fSlcblx0XHR9XG5cblx0fVxufVxuIiwiaW1wb3J0IHsgQWRkQ2xhc3MsIFJlbW92ZUNsYXNzLCBHZXRQYXJlbnRzIH0gZnJvbSAnbWduLXV0aWxpdHknO1xuaW1wb3J0IG1nblVhIGZyb20gJ21nbi11YSc7XG5cbmNvbnN0IFVBID0gbmV3IG1nblVhKCk7XG5cbmV4cG9ydCBkZWZhdWx0ICgpID0+IHtcblxuXHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cdC8vIGhlYWRlciBob3Jpem9udGFsIHNjcm9sbFxuXHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cblx0Y29uc3QgVEFSR0VUID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmwtaGVhZGVyX19pbm5lcicpWzBdO1xuXG5cdGNvbnN0IEhlYWRlckhvcml6b250YWxTY3JvbGwgPSAoIGxlZnQgKSA9PiB7XG5cblx0XHRUQVJHRVQuc3R5bGUubGVmdCA9IC1sZWZ0ICsncHgnO1xuXG5cdH1cblxuXG5cdGlmKCBUQVJHRVQgKXtcblxuXHRcdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsICgpID0+IHtcblxuXHRcdFx0SGVhZGVySG9yaXpvbnRhbFNjcm9sbCggZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbExlZnQgKTtcblxuXHRcdH0pXG5cblx0fVxuXG59XG4iLCJpbXBvcnQgeyBBZGRDbGFzcywgUmVtb3ZlQ2xhc3MsIEdldFBhcmVudHMgfSBmcm9tICdtZ24tdXRpbGl0eSc7XG5pbXBvcnQgbWduVWEgZnJvbSAnbWduLXVhJztcblxuY29uc3QgVUEgPSBuZXcgbWduVWEoKTtcblxuZXhwb3J0IGRlZmF1bHQgKCkgPT4ge1xuXG5cdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblx0Ly8gSG92ZXIgY2xhc3Ncblx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5cdGNvbnN0IFRBUkdFVCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdhJyk7XG5cdGNvbnN0IENMQVNTX05BTUUgPSAnaXMtaG92ZXInO1xuXG5cdGxldCBIb3ZlclN0YXJ0LFxuXHRcdEhvdmVyRW5kO1xuXG5cdGlmKCAhVUEuaXNTcCAmJiAhVUEuaXNUYWIgKXtcblx0XHRIb3ZlclN0YXJ0ID0gJ21vdXNlZW50ZXInLFxuXHRcdEhvdmVyRW5kID0gJ21vdXNlbGVhdmUnXG5cdH1lbHNle1xuXHRcdEhvdmVyU3RhcnQgPSAndG91Y2hzdGFydCcsXG5cdFx0SG92ZXJFbmQgPSAndG91Y2hlbmQnXG5cdH1cblxuXHRjb25zdCBIT1ZFUl9TVEFSVF9GTkMgPSAoZSkgPT4ge1xuXHRcdEFkZENsYXNzKCBlLmN1cnJlbnRUYXJnZXQgLCBDTEFTU19OQU1FICk7XG5cdH1cblxuXHRjb25zdCBIT1ZFUl9FTkRfRk5DID0gKGUpID0+IHtcblx0XHRSZW1vdmVDbGFzcyggZS5jdXJyZW50VGFyZ2V0LCBDTEFTU19OQU1FICk7XG5cdH1cblxuXHRmb3IgKHZhciBpID0gMDsgaSA8IFRBUkdFVC5sZW5ndGg7IGkrKykge1xuXG5cdFx0VEFSR0VUW2ldLnJlbW92ZUV2ZW50TGlzdGVuZXIoICd0cmFuc2l0aW9uZW5kJywgSE9WRVJfU1RBUlRfRk5DICk7XG5cblx0XHRUQVJHRVRbaV0uYWRkRXZlbnRMaXN0ZW5lciggSG92ZXJTdGFydCwgSE9WRVJfU1RBUlRfRk5DICk7XG5cblx0XHRUQVJHRVRbaV0uYWRkRXZlbnRMaXN0ZW5lciggSG92ZXJFbmQsIEhPVkVSX0VORF9GTkMgKTtcblxuXHR9XG5cbn1cbiIsImltcG9ydCBtZ25BY2NvcmRpb24gZnJvbSAnbWduLWFjY29yZGlvbic7XG5pbXBvcnQgeyBBZGRDbGFzcywgUmVtb3ZlQ2xhc3MsIEdldFBhcmVudHMgfSBmcm9tICdtZ24tdXRpbGl0eSc7XG5cbmV4cG9ydCBkZWZhdWx0ICgpID0+IHtcblx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIC8vIEFjY29yZGlvblxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuXG4gICAgbGV0IGFjY29yZGlvbkZvb3RlciA9IG5ldyBtZ25BY2NvcmRpb24oXG4gICAgICAgIFwiLmotYWNjb3JkaW9uX21lbnVcIixcbiAgICAgICAge1xuICAgICAgICAgICAgdG9nZ2xlU3BlZWQ6IDIwMCxcbiAgICAgICAgICAgIGJ0bkVsbTogXCIucGFyZW50c1wiLFxuICAgICAgICAgICAgZGV0YWlsRWxtOiBcIi5jaGlsZFwiXG4gICAgICAgIH1cbiAgICApO1xufVxuIiwiaW1wb3J0IHsgQWRkQ2xhc3MsIFJlbW92ZUNsYXNzLCBHZXRQYXJlbnRzIH0gZnJvbSAnbWduLXV0aWxpdHknO1xuXG5leHBvcnQgZGVmYXVsdCAoKSA9PiB7XG5cblx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXHQvLyBTaG93IFRvZ2dsZSBQYWdldG9wXG5cdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuXHRjb25zdCBUQVJHRVQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdodG1sJyk7XG5cblx0bGV0IGludGVydmFsID0gMTAsXG5cdFx0Y2xhc3NOYW1lID0gJ2lzLXNjcm9sbCcsXG5cdFx0c2hvd0ZsYWcgPSBmYWxzZSxcblx0XHRmaXhGbGFnID0gZmFsc2U7XG5cblxuXHRjb25zdCBHZXRTY3JvbGxUb3BGdW5jID0gKCkgPT4ge1xuXHRcdHJldHVybiB3aW5kb3cucGFnZVlPZmZzZXQ7XG5cdH1cblxuXG5cdGNvbnN0IFNob3dUb2dnbGVGdW5jID0gKCkgPT4ge1xuXG5cdFx0aWYoIEdldFNjcm9sbFRvcEZ1bmMoKSA+IGludGVydmFsICl7XG5cblx0XHRcdGlmKCAhc2hvd0ZsYWcgKXtcblx0XHRcdFx0QWRkQ2xhc3MoIFRBUkdFVCwgY2xhc3NOYW1lICk7XG5cdFx0XHR9XG5cblx0XHRcdHNob3dGbGFnID0gdHJ1ZTtcblxuXHRcdH1lbHNle1xuXG5cdFx0XHRpZiggc2hvd0ZsYWcgKXtcblx0XHRcdFx0UmVtb3ZlQ2xhc3MoIFRBUkdFVCwgY2xhc3NOYW1lICk7XG5cdFx0XHR9XG5cblx0XHRcdHNob3dGbGFnID0gZmFsc2U7XG5cdFx0fVxuXHR9XG5cblxuXHRpZiggVEFSR0VUICl7XG5cblx0XHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCAoKSA9PiB7XG5cblx0XHRcdFNob3dUb2dnbGVGdW5jKCk7XG5cblx0XHR9KVxuXG5cdFx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsICgpID0+IHtcblxuXHRcdFx0U2hvd1RvZ2dsZUZ1bmMoKTtcblxuXHRcdH0pXG5cblx0fVxuXG5cblxufVxuIiwiaW1wb3J0IHsgQWRkQ2xhc3MsIFJlbW92ZUNsYXNzLCBHZXRQYXJlbnRzIH0gZnJvbSAnbWduLXV0aWxpdHknO1xuXG5leHBvcnQgZGVmYXVsdCAoKSA9PiB7XG5cblxuXHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cdC8vIFNldCBUcmFuc2l0aW9uIENsYXNzXG5cdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuXHRjb25zdCBCUkVBS1BPSU5UID0gNjQwO1xuXHRjb25zdCBUQVJHRVQgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaHRtbCcpWzBdO1xuXG5cdGNvbnN0IENMQVNTTkFNRV9QQyA9ICdpcy10cmFuc2l0aW9uX3BjJztcblx0Y29uc3QgQ0xBU1NOQU1FX1NQID0gJ2lzLXRyYW5zaXRpb25fc3AnO1xuXG5cdGxldCB0aW1lciA9IG51bGwsXG5cdFx0ZGVsYXkgPSAxNTAsXG5cdFx0c3BGbGFnO1xuXG5cdGNvbnN0IEp1ZGdlV2luZG93V2lkdGggPSAoKT0+IHtcblxuXHRcdGNsZWFyVGltZW91dCggdGltZXIgKTtcblxuXHRcdHRpbWVyID0gc2V0VGltZW91dCggKCkgPT4ge1xuXG5cdFx0XHQvLy9cblxuXHRcdFx0aWYgKCB3aW5kb3cuaW5uZXJXaWR0aCA+IEJSRUFLUE9JTlQgKSB7XG5cblx0XHRcdFx0aWYoIHNwRmxhZyB8fCBzcEZsYWcgPT0gdW5kZWZpbmVkICl7XG5cblx0XHRcdFx0XHQvL1BD5Yem55CGXG5cdFx0XHRcdFx0UmVtb3ZlQ2xhc3MoIFRBUkdFVCwgQ0xBU1NOQU1FX1NQICk7XG5cdFx0XHRcdFx0QWRkQ2xhc3MoIFRBUkdFVCwgQ0xBU1NOQU1FX1BDICk7XG5cblx0XHRcdFx0XHRzcEZsYWcgPSBmYWxzZTtcblxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGlmKCAhc3BGbGFnIHx8IHNwRmxhZyA9PSB1bmRlZmluZWQgKXtcblxuXHRcdFx0XHRcdC8vU1Dlh6bnkIZcblx0XHRcdFx0XHRBZGRDbGFzcyggVEFSR0VULCBDTEFTU05BTUVfU1AgKTtcblx0XHRcdFx0XHRSZW1vdmVDbGFzcyggVEFSR0VULCBDTEFTU05BTUVfUEMgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHNwRmxhZyA9IHRydWU7XG5cdFx0XHR9XG5cblx0XHRcdC8vL1xuXG5cdFx0fSwgZGVsYXkgKTtcblx0fVxuXG5cdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCAncmVzaXplJywgKCkgPT4ge1xuXG5cdFx0SnVkZ2VXaW5kb3dXaWR0aCgpO1xuXG5cdH0gKTtcblxuXHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggJ2xvYWQnLCAoKSA9PiB7XG5cblx0XHRKdWRnZVdpbmRvd1dpZHRoKCk7XG5cblx0fSApO1xuXG5cbn1cbiIsImltcG9ydCB7IEFkZENsYXNzLCBSZW1vdmVDbGFzcywgR2V0UGFyZW50cyB9IGZyb20gJ21nbi11dGlsaXR5JztcbmltcG9ydCBtZ25VYSBmcm9tICdtZ24tdWEnO1xuXG5pbXBvcnQgU2Nyb2xsZG93biBmcm9tICcuL19zY3JvbGxkb3duJztcbmltcG9ydCBTZXRUcmFuc2l0aW9uIGZyb20gJy4vX3NldF90cmFuc2l0aW9uJztcbmltcG9ydCBIZWFkZXJNZW51IGZyb20gJy4vX2hlYWRlcl9tZW51JztcbmltcG9ydCBIb3Jpem9udGFsU2Nyb2xsIGZyb20gJy4vX2hvcml6b250YWxfc2Nyb2xsJztcbmltcG9ydCBBY2NvcmRpb25NZW51IGZyb20gJy4vX21lbnVfYWNjb3JkaW9uJztcbmltcG9ydCBIb3ZlclRvdWNoIGZyb20gJy4vX2hvdmVyX3RvdWNoJztcblxuLy8vL1xuXG5jb25zdCBJbml0ID0gKCkgPT4ge1xuXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIC8vIFNjcm9sbGRvd24gKCDkuIDlrprph4/jgrnjgq/jg63jg7zjg6vjgZfjgZ/mmYLjgas8aHRtbD7jgatjbGFzc+i/veWKoCApXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gICAgU2Nyb2xsZG93bigpO1xuXG5cbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLy8gSG92ZXJUb3VjaCAoIOOCv+ODg+ODgeOCguOBl+OBj+OBr+ODm+ODkOODvOaZguOBq+Wvvuixoeimgee0oOOBq2NsYXNz6L+95YqgIClcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgICBIb3ZlclRvdWNoKCk7XG5cblxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvLyBTZXRUcmFuc2l0aW9uICgg44Km44Kk44Oz44OJ44Km44K144Kk44K644KS5Yik5Yil44GX44GmPGh0bWw+44GrdHJhbnNpdGlvbueUqOOBrmNsYXNz6L+95YqgIClcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgICBTZXRUcmFuc2l0aW9uKCk7XG5cblxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvLyBIZWFkZXIgLSBIb3Jpem9udGFsU2Nyb2xsICgg5Zu65a6a44OY44OD44OA44O844Gu5qiq44K544Kv44Ot44O844OrIClcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgICBIb3Jpem9udGFsU2Nyb2xsKCk7XG5cblxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvLyBIZWFkZXIgLSBNZW5177yIU1DvvIlcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgICBIZWFkZXJNZW51KCk7XG5cblxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvLyBIZWFkZXIgJiBGb290ZXIgLSBBY2NvcmRpb25cbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgICBBY2NvcmRpb25NZW51KCk7XG5cblxufVxuXG5leHBvcnQgZGVmYXVsdCBJbml0O1xuIiwiaW1wb3J0IENvbW1vbiBmcm9tICcuL2NvbW1vbi9jb21tb24nO1xuXG4vLy8vXG5cbmNvbnN0IEluaXQgPSAoKSA9PiB7XG5cblx0Q29tbW9uKCk7XG5cbn1cblxuSW5pdCgpO1xuIl19
